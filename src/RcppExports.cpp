// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// honest_rpart_cpp
NumericVector honest_rpart_cpp(List unique_leaves_honest, NumericVector y_honest, NumericVector honest_leaves);
RcppExport SEXP _aggTrees_honest_rpart_cpp(SEXP unique_leaves_honestSEXP, SEXP y_honestSEXP, SEXP honest_leavesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type unique_leaves_honest(unique_leaves_honestSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_honest(y_honestSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type honest_leaves(honest_leavesSEXP);
    rcpp_result_gen = Rcpp::wrap(honest_rpart_cpp(unique_leaves_honest, y_honest, honest_leaves));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aggTrees_honest_rpart_cpp", (DL_FUNC) &_aggTrees_honest_rpart_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_aggTrees(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
