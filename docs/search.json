[{"path":"/articles/aggTrees-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Aggregation Trees","text":"R package implement aggregation trees, nonparametric approach discovering heterogeneous subgroups selection--observables framework. approach consists three steps: Estimate conditional average treatment effects (CATEs); Approximate CATEs decision tree; Prune tree. way, generate sequence groupings, one granularity level. resulting sequence nested sense subgroups formed given level granularity never broken coarser levels. guarantees consistency results across different granularity levels, generally considered basic requirement every classification system satisfy. Moreover, grouping features optimality property ensures loss explained heterogeneity resulting aggregation minimized. Given sequence groupings, can pick particular granularity level estimate group average treatment effects (GATEs). randomized experiments, unbiased GATE estimator consists taking difference mean outcomes treated control units group. Equivalently, can obtain point estimates addition standard errors estimating via OLS following linear model: \\[\\begin{equation}     Y_i = \\sum_{l = 1}^{|\\mathcal{T_{\\alpha}}|} L_{, l} \\, \\gamma_l + \\sum_{l = 1}^{|\\mathcal{T}_{\\alpha}|} L_{, l} \\, D_i \\, \\beta_l + \\epsilon_i \\end{equation}\\] \\(|\\mathcal{T}_{\\alpha}|\\) number leaves particular tree \\(\\mathcal{T}_{\\alpha}\\), \\(L_{, l}\\) dummy variable equal one \\(\\)-th unit falls \\(l\\)-th leaf \\(\\mathcal{T}_{\\alpha}\\). Exploiting random assignment treatment, can show \\(\\beta_l\\) identifies GATE \\(l\\)-th leaf. However, observational studies estimator biased due selection treatment. get unbiased estimates, can construct via \\(K\\)-fold cross-fitting following doubly-robust scores: \\[\\begin{equation*}     \\Gamma_i = \\mu \\left( 1, X_i \\right) - \\mu \\left( 0, X_i \\right) + \\frac{D_i \\left[ Y_i - \\mu \\left( 1, X_i \\right) \\right]}{p \\left( X_i \\right)}  - \\frac{ \\left( 1 - D_i \\right) \\left[ Y_i - \\mu \\left( 0, X_i \\right) \\right]}{1 - p \\left( X_i \\right)} \\end{equation*}\\] \\(\\mu \\left(D_i, X_i \\right) = \\mathbb{E} \\left[ Y_i | D_i, Z_i \\right]\\) conditional mean \\(Y_i\\) \\(p \\left( X_i \\right) = \\mathbb{P} \\left( D_i = 1 | X_i \\right)\\) propensity score. Consider following linear model: \\[\\begin{equation}     \\widehat{\\Gamma}_i = \\sum_{l = 1}^{|\\mathcal{T}_{\\alpha}|} L_{, l} \\, \\beta_l + \\epsilon_i \\end{equation}\\] , can show \\(\\beta_l\\) identifies GATE \\(l\\)-th leaf, time even observational studies. Importantly, OLS estimator \\(\\hat{\\beta}_l\\) \\(\\beta_l\\) root-\\(n\\) consistent asymptotically normal, provided product convergence rates estimators nuisance functions \\(\\mu \\left( \\cdot, \\cdot \\right)\\) \\(p \\left( \\cdot \\right)\\) faster \\(n^{1/2}\\). However, GATE estimates may show bias use data construct tree estimate models , leading invalid inference. One way grow “honest” aggregation trees. Honesty subsample-splitting technique requires different observations used form subgroups estimate GATEs. purpose, split observed sample training sample \\(\\mathcal{S}^{tr}\\) honest sample \\(\\mathcal{S}^{hon}\\) arbitrary sizes. use \\(\\mathcal{S}^{tr}\\) estimate CATEs construct tree , particular grouping \\(\\mathcal{T}_{\\alpha}\\), use \\(\\mathcal{S}^{hon}\\) estimate models . way, asymptotic properties estimators discussed groupings exogenously given. allows us use estimated standard errors conduct inference GATEs using standard methods, e.g., constructing conventional confidence intervals.","code":""},{"path":"/articles/aggTrees-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Aggregation Trees","text":"package can downloaded CRAN: Alternatively, current development version package can installed using devtools package:","code":"install.packages(\"aggTrees\") devtools::install_github(\"riccardo-df/aggTrees\") # run install.packages(\"devtools\") if needed."},{"path":"/articles/aggTrees-vignette.html","id":"usage-examples","dir":"Articles","previous_headings":"","what":"Usage Examples","title":"Aggregation Trees","text":"section demonstrates use package. Let us generate data:","code":"## Generate data. set.seed(1986)  n <- 5000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)"},{"path":"/articles/aggTrees-vignette.html","id":"constructing-the-sequence-of-groupings","dir":"Articles","previous_headings":"Usage Examples","what":"Constructing the Sequence of Groupings","title":"Aggregation Trees","text":"build_aggtree function can used construct sequence groupings. function estimates CATEs internally via causal forest approximates decision tree. , computes node predictions (.e., GATEs) either taking difference mean outcomes treated control units node constructing averaging doubly-robust scores, according method argument. default, build_aggtree implements honesty.  use different CATE estimator, can use cates argument. case, also need specify is_honest, logical vector denoting observations allocated honest sample. way, build_aggtree knows observations must used construct tree compute node predictions.","code":"## Construct sequence of groupings. CATEs estimated internally. groupings <- build_aggtree(y, D, X, method = \"aipw\") # We set 'method = \"aipw\"' to construct and average doubly-robust scores.  ## Print. print(groupings) #> Honest estimates: TRUE  #> n= 2500  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #>  1) root 2500 2380.264000  0.045018990   #>    2) x2< 0.4111544 1654  623.407600 -0.529343000   #>      4) x2< -0.7479499 594   61.023280 -1.313696000   #>        8) x2< -1.40893 224    3.623873 -1.929331000 * #>        9) x2>=-1.40893 370   11.294270 -1.003363000 * #>      5) x2>=-0.7479499 1060   82.638300 -0.120887400   #>       10) x2< -0.3224095 345    8.867871 -0.380943400 * #>       11) x2>=-0.3224095 715   16.486690  0.002983327 * #>    3) x2>=0.4111544 846  199.306000  1.087667000   #>      6) x2< 1.534637 682   43.075580  0.961647100   #>       12) x2< 0.7833315 280    3.750833  0.583637500 * #>       13) x2>=0.7833315 402    6.551331  1.261884000 * #>      7) x2>=1.534637 164    4.632625  1.772559000 *  ## Plot. plot(groupings) # Try also setting 'sequence = TRUE'. ## Estimate the CATEs. splits <- sample_split(length(y), training_frac = 0.5) training_idx <- splits$training_idx honest_idx <- splits$honest_idx  y_tr <- y[training_idx] D_tr <- D[training_idx] X_tr <- X[training_idx, ]  y_hon <- y[honest_idx] D_hon <- D[honest_idx] X_hon <- X[honest_idx, ]  library(grf) forest <- causal_forest(X_tr, y_tr, D_tr) # Use training sample. cates <- predict(forest, X)$predictions  ## Use the arguments 'cates' and 'is_honest'. groupings <- build_aggtree(y, D, X, method = \"aipw\",                             cates = cates, is_honest = 1:length(y) %in% honest_idx)"},{"path":"/articles/aggTrees-vignette.html","id":"gates-estimation-and-inference","dir":"Articles","previous_headings":"Usage Examples","what":"GATEs Estimation and Inference","title":"Aggregation Trees","text":"Now whole sequence optimal groupings. can pick grouping associated preferred granularity level run analysis. First, like get standard errors GATEs. achieved estimating via OLS appropriate linear models using honest sample (see Introduction ). , can assess whether find systematic heterogeneity testing bunch hypotheses. example, can use standard errors test hypotheses differences GATEs across pairs leaves equal zero. evidence heterogeneity found, can investigate mechanisms behind computing average characteristics units group. done inference_aggtree function. help user report results, package allows us print nice LATEX tables.","code":"## Inference with 4 groups. results <- inference_aggtree(groupings, n_groups = 4) print(results, table = \"diff\") #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.2} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 0.85\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c} #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex]  #>  #>       & \\textit{Leaf 1} & \\textit{Leaf 2} & \\textit{Leaf 3} & \\textit{Leaf 4} \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\multirow{2}{*}{GATEs} & -1.419 & -0.174 & 0.778 & 1.506 \\\\ #>       & [-1.597, -1.241] & [-0.294, -0.054] & [0.606, 0.95] & [1.267, 1.745] \\\\  #>  #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\textit{Leaf 1} & NA & NA & NA & NA \\\\ #>             & (NA) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 2} & 1.245 & NA & NA & NA \\\\ #>             & (0) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 3} & 2.197 & 0.952 & NA & NA \\\\ #>             & (0) & (0) & (NA) & (NA) \\\\  #>       \\textit{Leaf 4} & 2.925 & 1.681 & 0.729 & NA \\\\ #>             & (0) & (0) & (0) & (NA) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Point estimates and $95\\%$ confidence intervals for the GATEs. Leaves are sorted in increasing order of the GATEs. Additionally, differences in the GATEs across all pairs of leaves are displayed. p-values to test the null hypothesis that a single difference is zero are adjusted using Holm's procedure and reported in parenthesis under each point estimate.} #>     \\label{table:differences.gates} #>     \\end{table} #> \\endgroup print(results, table = \"avg_char\") #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.1} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 1\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c c c c c } #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>       & \\multicolumn{2}{c}{\\textit{Leaf 1}} & \\multicolumn{2}{c}{\\textit{Leaf 2}} & \\multicolumn{2}{c}{\\textit{Leaf 3}} & \\multicolumn{2}{c}{\\textit{Leaf 4}} \\\\\\cmidrule{2-3} \\cmidrule{4-5} \\cmidrule{6-7} \\cmidrule{8-9}  #>       & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\texttt{x1} & 0.047 & (0.041) & -0.008 & (0.031) & 0.04 & (0.041) & 0.071 & (0.055) \\\\  #>       \\texttt{x2} & -1.368 & (0.021) & -0.177 & (0.01) & 0.743 & (0.01) & 1.71 & (0.026) \\\\  #>       \\texttt{x3} & 0.075 & (0.043) & -0.002 & (0.03) & 0.021 & (0.042) & 0.037 & (0.06) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Average characteristics of units in each leaf, obtained by regressing each covariate on a set of dummies denoting leaf membership. Standard errors are estimated via the Eicker-Huber-White estimator. Leaves are sorted in increasing order of the GATEs.} #>     \\label{table:average.characteristics.leaves} #>     \\end{table} #> \\endgroup"},{"path":"/articles/aggTrees-vignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Aggregation Trees","text":"Athey, S., & Imbens, G. W. (2016). Recursive Partitioning Heterogeneous Causal Effects. Proceedings National Academy Sciences, 113(27). [paper] Athey, S., Tibshirani, J., & Wager, S. (2019). Generalized Random Forests. Annals Statistics, 47(2). [paper] Chernozhukov, V., Demirer, M., Duflo, E., & Fernandez-Val, . (2017). Generic Machine Learning Inference Heterogeneous Treatment Effects Randomized Experiments. National Bureau Economic Research. [paper] Di Francesco, R. (2022). Aggregation Trees. CEIS Research Paper, 546. [paper] Holm, S. (1979). Simple Sequentially Rejective Multiple Test Procedure. Scandinavian Journal Statistics, 6(2). [paper] Semenova, V., & Chernozhukov, V. (2021). Debiased Machine Learning Conditional Average Treatment Effects Causal Functions. Econometrics Journal, 24(2). [paper]","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Riccardo Di Francesco. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Di Francesco R (2023). aggTrees: Aggregation Trees. R package version 2.0.0.","code":"@Manual{,   title = {aggTrees: Aggregation Trees},   author = {Riccardo {Di Francesco}},   year = {2023},   note = {R package version 2.0.0}, }"},{"path":"/index.html","id":"aggregation-trees","dir":"","previous_headings":"","what":"Aggregation Trees","title":"Aggregation Trees","text":"R package implement aggregation trees, nonparametric data-driven approach discovering heterogeneous subgroups selection--observables framework. Additionally, package provides useful functions work rpart objects. approach consists three steps: Estimate conditional average treatment effects (CATEs); Approximate CATEs decision tree; Prune tree. way, generate sequence groupings, one granularity level. resulting sequence nested sense subgroups formed given level granularity never broken coarser levels. guarantees consistency results across different granularity levels, generally considered basic requirement every classification system satisfy. Moreover, grouping features optimality property ensures loss explained heterogeneity resulting aggregation minimized. Given sequence groupings, can estimate group average treatment effects (GATEs) like. package supports two estimators, based differences mean outcomes treated control units (unbiased randomized experiments) sample averages doubly-robust scores (unbiased also observational studies). package also allows get standard errors GATEs estimating via OLS appropriate linear models. honesty condition required conduct valid inference. Thus, different subsamples must used construct tree estimate linear models.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Aggregation Trees","text":"package can downloaded CRAN: Alternatively, current development version package can installed using devtools package:","code":"install.packages(\"aggTrees\") library(aggTrees) devtools::install_github(\"riccardo-df/aggTrees\") # run install.packages(\"devtools\") if needed. library(aggTrees)"},{"path":"/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage Examples","title":"Aggregation Trees","text":"section demonstrates use package. Let us generate data: first step, need estimate CATEs. can estimator like. , second step construct tree using CATEs outcome. Given tree, can compute node predictions (.e., GATEs) like. done build_aggtree function. default, build_aggtree estimates CATEs internally via causal forest. Alternatively, can override using cates argument input estimated CATEs. case, also need specify is_honest, logical vector denoting observations allocated honest sample. way, build_aggtree knows observations must used construct tree compute node predictions. following chunk code, illustrate typical usage build_aggtree. set method == \"aipw\" compute node predictions constructing averaging doubly-robust scores. Now whole sequence optimal groupings. can pick grouping associated preferred granularity level run analysis. First, like get standard errors GATEs. achieved estimating via OLS appropriate linear models using honest sample. , can assess whether find systematic heterogeneity testing bunch hypotheses. example, can use standard errors test hypotheses GATEs different across pairs leaves. , adjust p-values account multiple hypotheses testing using Holm’s procedure. Additionally, can investigate driving mechanisms computing average characteristics units group. done inference_aggtree function.","code":"## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n) ## Construct sequence of groupings. CATEs estimated internally. groupings <- build_aggtree(y, D, X, method = \"aipw\")  ## Alternatively, we can estimate the CATEs and pass them. splits <- sample_split(length(y), training_frac = 0.5) training_idx <- splits$training_idx honest_idx <- splits$honest_idx  y_tr <- y[training_idx] D_tr <- D[training_idx] X_tr <- X[training_idx, ]  y_hon <- y[honest_idx] D_hon <- D[honest_idx] X_hon <- X[honest_idx, ]  library(grf) forest <- causal_forest(X_tr, y_tr, D_tr) # Use training sample. cates <- predict(forest, X)$predictions  groupings <- build_aggtree(y, D, X, method = \"aipw\", cates = cates,                            is_honest = 1:length(y) %in% honest_idx)  ## We have compatibility with generic S3-methods. summary(groupings) print(groupings) plot(groupings) # Try also setting 'sequence = TRUE'.  ## To predict, do the following. tree <- subtree(groupings$tree, cv = TRUE) # Select by cross-validation. predict(tree, data.frame(X)) ## Inference with 4 groups. results <- inference_aggtree(groupings, n_groups = 4)  summary(results$model) # Coefficient of leafk is GATE in k-th leaf.  results$gates_diff_pairs$gates_diff # GATEs differences. results$gates_diff_pairs$holm_pvalues # leaves 1-2 not statistically different.  ## LATEX. print(results, table = \"diff\") print(results, table = \"avg_char\")"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Aggregation Trees","text":"Athey, S., & Imbens, G. W. (2016). Recursive Partitioning Heterogeneous Causal Effects. Proceedings National Academy Sciences, 113(27). [paper] Athey, S., Tibshirani, J., & Wager, S. (2019). Generalized Random Forests. Annals Statistics, 47(2). [paper] Chernozhukov, V., Demirer, M., Duflo, E., & Fernandez-Val, . (2017). Generic Machine Learning Inference Heterogeneous Treatment Effects Randomized Experiments. National Bureau Economic Research. [paper] Di Francesco, R. (2022). Aggregation Trees. CEIS Research Paper, 546. [paper] Holm, S. (1979). Simple Sequentially Rejective Multiple Test Procedure. Scandinavian Journal Statistics, 6(2). [paper] Semenova, V., & Chernozhukov, V. (2021). Debiased Machine Learning Conditional Average Treatment Effects Causal Functions. Econometrics Journal, 24(2). [paper]","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 aggTrees authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaves Average Characteristics — avg_characteristics_rpart","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"Computes average characteristics units leaf rpart object.","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"","code":"avg_characteristics_rpart(tree, X)"},{"path":"/reference/avg_characteristics_rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"tree rpart object. X Covariate matrix (intercept).","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"list storing regression lm_robust object.","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"avg_characteristics_rpart regresses covariate set dummies denoting leaf membership. way, get average characteristics units leaf, together standard error. Leaves ordered increasing order predictions (negative positive). Standard errors estimated via Eicker-Huber-White estimator.","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/avg_characteristics_rpart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"Riccardo Di Francesco","code":""},{"path":"/reference/avg_characteristics_rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leaves Average Characteristics — avg_characteristics_rpart","text":"","code":"## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Construct a tree. library(rpart) tree <- rpart(y ~ ., data = data.frame(\"y\" = y, X), maxdepth = 2)  ## Compute average characteristics in each leaf. results <- avg_characteristics_rpart(tree, X) results #> $x1 #>         Estimate Std. Error   t value      Pr(>|t|)   CI Lower   CI Upper  DF #> leaf1 -0.6842363 0.03891988 -17.58064  1.820282e-60 -0.7606107 -0.6078620 996 #> leaf2 -1.0285623 0.03511188 -29.29385 1.475196e-136 -1.0974641 -0.9596606 996 #> leaf3  0.9479987 0.04694932  20.19196  2.872890e-76  0.8558678  1.0401296 996 #> leaf4  0.6519292 0.03386953  19.24825  1.928781e-70  0.5854653  0.7183930 996 #>  #> $x2 #>         Estimate Std. Error   t value      Pr(>|t|)   CI Lower   CI Upper  DF #> leaf1 -1.0023930 0.03864401 -25.93915 9.332206e-114 -1.0782260 -0.9265599 996 #> leaf2  0.5961527 0.04565908  13.05661  4.435946e-36  0.5065537  0.6857517 996 #> leaf3 -0.9994408 0.04208617 -23.74749  3.871292e-99 -1.0820286 -0.9168531 996 #> leaf4  0.6490106 0.03296403  19.68845  3.822315e-73  0.5843237  0.7136976 996 #>  #> $x3 #>           Estimate Std. Error     t value  Pr(>|t|)    CI Lower   CI Upper  DF #> leaf1  0.034682951 0.06678296  0.51933835 0.6036402 -0.09636849 0.16573440 996 #> leaf2  0.004315809 0.06991988  0.06172506 0.9507942 -0.13289137 0.14152298 996 #> leaf3 -0.010503234 0.07545163 -0.13920486 0.8893164 -0.15856564 0.13755917 996 #> leaf4 -0.033976386 0.04994827 -0.68023146 0.4965160 -0.13199231 0.06403954 996 #>"},{"path":"/reference/balance_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance Measures — balance_measures","title":"Balance Measures — balance_measures","text":"Compute several balance measures check whether covariate distributions balanced across treatment arms.","code":""},{"path":"/reference/balance_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance Measures — balance_measures","text":"","code":"balance_measures(X, D)"},{"path":"/reference/balance_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance Measures — balance_measures","text":"X Covariate matrix (intercept). D Treatment assignment vector.","code":""},{"path":"/reference/balance_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balance Measures — balance_measures","text":"Prints LATEX code console.","code":""},{"path":"/reference/balance_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Balance Measures — balance_measures","text":"covariate X, balance_measures computes sample averages standard deviations treatment arms. Additionally, two balance measures computed: Norm. Diff. Normalized differences, computed differences means covariate   across treatment arms, normalized sum within-arm variances. provide measure   discrepancy locations covariate distributions across treatment arms. Log S.D. Log ratio standard deviations computed logarithm ratio   within-arm standard deviations. provide measure   discrepancy dispersion covariate distributions across treatment arms. Compilation LATEX code requires following packages: booktabs, float, adjustbox.","code":""},{"path":"/reference/balance_measures.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Balance Measures — balance_measures","text":"Elena Dal Torrione, Riccardo Di Francesco","code":""},{"path":"/reference/balance_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance Measures — balance_measures","text":"","code":"## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Print table. balance_measures(X, D) #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.1} #>   \\begin{table}[H] #>     \\centering #>     \\begin{adjustbox}{width = 0.75\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c c c} #>     \\\\[-1.8ex]\\hline #>     \\hline \\\\[-1.8ex] #>     & \\multicolumn{2}{c}{Treated} & \\multicolumn{2}{c}{Controls} & \\multicolumn{2}{c}{Overlap measures} \\\\ \\cmidrule{6-7} #>     & \\multicolumn{2}{c}{($n_t =  502 $)} & \\multicolumn{2}{c}{($n_c = 498 $)} & \\\\ \\cmidrule{2-5} #>     & Mean & (S.D.) & Mean & (S.D.) & $\\hat{\\Delta}_j$ & $\\hat{\\Gamma}_j$ \\\\ #>     \\addlinespace[2pt] #>     \\hline \\\\[-1.8ex]  #>  #>     \\texttt{x1} & 0.080 & (1.011) & 0.028 & (1.004) & 0.052 & 0.007 \\\\  #>     \\texttt{x2} & -0.005 & (1.026) & -0.009 & (0.999) & 0.003 & 0.027 \\\\  #>     \\texttt{x3} & -0.026 & (1.015) & 0.013 & (0.979) & -0.039 & 0.036 \\\\  #>  #>     \\addlinespace[3pt] #>     \\\\[-1.8ex]\\hline #>     \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Balance between treatment and control groups. The last two columns report the estimated normalized differences ($\\hat{\\Delta}_j$) and logarithms of the ratio of standard deviations ($\\hat{\\Gamma}_j$).} #>     \\label{table:descriptive.stats} #>     \\end{table} #> \\endgroup"},{"path":"/reference/build_aggtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation Trees — build_aggtree","title":"Aggregation Trees — build_aggtree","text":"Nonparametric data-driven approach discovering heterogeneous subgroups selection--observables framework. approach constructs sequence groupings, one level granularity. Groupings nested feature optimality property. grouping, obtain point estimation standard errors group average treatment effects (GATEs). Additionally, assess whether systematic heterogeneity found testing hypotheses differences GATEs across pairs groups zero. Finally, investigate driving mechanisms effect heterogeneity computing average characteristics units group.","code":""},{"path":"/reference/build_aggtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation Trees — build_aggtree","text":"","code":"build_aggtree(   y,   D,   X,   honest_frac = 0.5,   method = \"aipw\",   scores = NULL,   cates = NULL,   is_honest = NULL,   ... )  inference_aggtree(object, n_groups)"},{"path":"/reference/build_aggtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation Trees — build_aggtree","text":"y Outcome vector. D Treatment vector. X Covariate matrix (intercept). honest_frac Fraction observations allocated honest sample. method Either \"raw\" \"aipw\", controls node predictions computed. scores Optional, vector scores used computing node predictions. Useful save computational time scores already estimated. Ignored method == \"raw\". cates Optional, estimated CATEs. provided user, CATEs estimated internally via causal_forest. is_honest Logical vector denoting observations belong honest sample. Required cates argument used. ... arguments rpart.control. object aggTrees object. n_groups Number desired groups.","code":""},{"path":"/reference/build_aggtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation Trees — build_aggtree","text":"build_aggtree returns aggTrees object. inference_aggtree returns aggTrees.inference object, turn contains aggTrees object used call.","code":""},{"path":"/reference/build_aggtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregation Trees — build_aggtree","text":"Aggregation trees three-step procedure. First, conditional average treatment effects (CATEs) estimated using estimator. Second, tree grown approximate CATEs. Third, tree pruned derive nested sequence optimal groupings, one granularity level. level granularity, can obtain point estimation inference GATEs. implement methodology, user can rely two core functions handle various steps.","code":""},{"path":"/reference/build_aggtree.html","id":"constructing-the-sequence-of-groupings","dir":"Reference","previous_headings":"","what":"Constructing the Sequence of Groupings","title":"Aggregation Trees — build_aggtree","text":"build_aggtree constructs sequence groupings (.e., tree) estimate GATEs node. GATEs can estimated several ways. controlled method argument. method == \"raw\", compute difference mean outcomes treated control observations node. unbiased estimator randomized experiment. method == \"aipw\", construct doubly-robust scores average node. unbiased also observational studies. Honest regression forests 5-fold cross fitting used estimate propensity score conditional mean function outcome (unless user specifies argument scores). user can provide vector estimated CATEs via cates argument. , user needs specify logical vector denote observations belong honest sample. honesty desired, is_honest must vector FALSEs. vector CATEs provided, estimated internally via causal_forest.","code":""},{"path":"/reference/build_aggtree.html","id":"gates-estimation-and-inference","dir":"Reference","previous_headings":"","what":"GATEs Estimation and Inference","title":"Aggregation Trees — build_aggtree","text":"inference_aggtree takes input aggTrees object constructed build_aggtree. , desired granularity level, chosen via n_groups argument, provides point estimation standard errors GATEs. Additionally, performs hypothesis testing assess whether find systematic heterogeneity computes average characteristics units group investigate driving mechanisms.","code":""},{"path":"/reference/build_aggtree.html","id":"point-estimates-and-standard-errors-for-the-gates","dir":"Reference","previous_headings":"","what":"Point estimates and standard errors for the GATEs","title":"Aggregation Trees — build_aggtree","text":"GATEs standard errors obtained fitting appropriate linear model. method == \"raw\", estimate via OLS following: $$Y_i = \\sum_{l = 1}^{|T|} L_{, l} \\gamma_l + \\sum_{l = 1}^{|T|} L_{, l} D_i \\beta_l + \\epsilon_i$$ L_{, l} dummy variable equal one -th unit falls l-th group, |T| number groups. treatment randomly assigned, one can show betas identify GATE group. However, true observational studies due selection treatment. case, user expected use method == \"aipw\" calling build_aggtree. case, inference_aggtree uses scores following regression: $$score_i = \\sum_{l = 1}^{|T|} L_{, l} \\beta_l + \\epsilon_i$$ way, betas identify GATEs. Regardless method, standard errors estimated via Eicker-Huber-White estimator.","code":""},{"path":"/reference/build_aggtree.html","id":"hypothesis-testing","dir":"Reference","previous_headings":"","what":"Hypothesis testing","title":"Aggregation Trees — build_aggtree","text":"inference_aggtree uses standard errors obtained fitting linear models test hypotheses GATEs different across pairs leaves. , adjust p-values account multiple hypotheses testing using Holm's procedure.","code":""},{"path":"/reference/build_aggtree.html","id":"average-characteristics","dir":"Reference","previous_headings":"","what":"Average Characteristics","title":"Aggregation Trees — build_aggtree","text":"inference_aggtree regresses covariate set dummies denoting group membership. way, get average characteristics units leaf, together standard error. Leaves ordered increasing order predictions (negative positive). Standard errors estimated via Eicker-Huber-White estimator.","code":""},{"path":"/reference/build_aggtree.html","id":"caution-on-inference","dir":"Reference","previous_headings":"","what":"Caution on Inference","title":"Aggregation Trees — build_aggtree","text":"Regardless chosen method, functions estimate GATEs, linear models, average characteristics units group using observations honest sample. honest sample empty (happens user either sets honest_frac = 0 passes vector FALSEs is_honest calling build_aggtree), data used construct tree used estimate quantities. fine prediction invalidates inference.","code":""},{"path":"/reference/build_aggtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregation Trees — build_aggtree","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/build_aggtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregation Trees — build_aggtree","text":"Riccardo Di Francesco","code":""},{"path":"/reference/build_aggtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregation Trees — build_aggtree","text":"","code":"# \\donttest{ ## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Construct sequence of groupings. CATEs estimated internally. groupings <- build_aggtree(y, D, X, method = \"aipw\")  ## Alternatively, we can estimate the CATEs and pass them. splits <- sample_split(length(y), training_frac = 0.5) training_idx <- splits$training_idx honest_idx <- splits$honest_idx  y_tr <- y[training_idx] D_tr <- D[training_idx] X_tr <- X[training_idx, ]  y_hon <- y[honest_idx] D_hon <- D[honest_idx] X_hon <- X[honest_idx, ]  library(grf) forest <- causal_forest(X_tr, y_tr, D_tr) # Use training sample. cates <- predict(forest, X)$predictions  groupings <- build_aggtree(y, D, X, method = \"aipw\", cates = cates,                            is_honest = 1:length(y) %in% honest_idx)  ## We have compatibility with generic S3-methods. summary(groupings) #> Honest estimates: TRUE  #> Call: #> rpart::rpart(formula = cates ~ ., data = data.frame(cates = cates[training_idx],  #>     X_tr), method = \"anova\", model = TRUE, control = rpart::rpart.control(...)) #>   n= 500  #>  #>           CP nsplit  rel error     xerror        xstd #> 1 0.83021454      0 1.00000000 1.00778617 0.031109733 #> 2 0.09444890      1 0.16978546 0.17194188 0.007558588 #> 3 0.03890429      2 0.07533656 0.07852522 0.005901896 #> 4 0.01000000      3 0.03643228 0.03837119 0.001983554 #>  #> Variable importance #> x2 x3 x1  #> 92  4  4  #>  #> Node number 1: 500 observations,    complexity param=0.8302145 #>   mean=-0.06392082, MSE=1.042702  #>   left son=2 (230 obs) right son=3 (270 obs) #>   Primary splits: #>       x2 < -0.07518198 to the left,  improve=0.83021450, (0 missing) #>       x1 < 0.3506824   to the left,  improve=0.02044446, (0 missing) #>       x3 < -0.9775529  to the left,  improve=0.01422357, (0 missing) #>   Surrogate splits: #>       x3 < -0.983981   to the left,  agree=0.560, adj=0.043, (0 split) #>       x1 < -0.207075   to the left,  agree=0.558, adj=0.039, (0 split) #>  #> Node number 2: 230 observations,    complexity param=0.03890429 #>   mean=-0.7872534, MSE=0.1264477  #>   left son=4 (169 obs) right son=5 (61 obs) #>   Primary splits: #>       x2 < -0.4126471  to the left,  improve=0.69741100, (0 missing) #>       x1 < 0.3089535   to the left,  improve=0.10225520, (0 missing) #>       x3 < -0.61261    to the left,  improve=0.01362212, (0 missing) #>   Surrogate splits: #>       x1 < -1.889246   to the right, agree=0.743, adj=0.033, (0 split) #>       x3 < 2.095613    to the left,  agree=0.739, adj=0.016, (0 split) #>  #> Node number 3: 270 observations,    complexity param=0.0944489 #>   mean=0.5826947, MSE=0.220129  #>   left son=6 (122 obs) right son=7 (148 obs) #>   Primary splits: #>       x2 < 0.5478927   to the left,  improve=0.82848760, (0 missing) #>       x3 < 0.4544582   to the left,  improve=0.04156441, (0 missing) #>       x1 < 1.302729    to the left,  improve=0.01833234, (0 missing) #>   Surrogate splits: #>       x3 < -1.130523   to the left,  agree=0.593, adj=0.098, (0 split) #>       x1 < 0.09411584  to the left,  agree=0.570, adj=0.049, (0 split) #>  #> Node number 4: 169 observations #>   mean=-1.053134, MSE=0.03208054  #>  #> Node number 5: 61 observations #>   mean=0.1088638, MSE=0.05538655  #>  #> Node number 6: 122 observations #>   mean=-0.08334184, MSE=0.040056  #>  #> Node number 7: 148 observations #>   mean=1.190815, MSE=0.03585797  #>  print(groupings) #> Honest estimates: TRUE  #> n= 500  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #> 1) root 500 521.351000 -0.06392082   #>   2) x2< -0.07518198 230  29.082980 -0.78725340   #>     4) x2< -0.4126471 169   5.421611 -1.05313400 * #>     5) x2>=-0.4126471 61   3.378579  0.10886380 * #>   3) x2>=-0.07518198 270  59.434830  0.58269470   #>     6) x2< 0.5478927 122   4.886831 -0.08334184 * #>     7) x2>=0.5478927 148   5.306980  1.19081500 * plot(groupings) # Try also setting 'sequence = TRUE'.   ## To predict, do the following. tree <- subtree(groupings$tree, cv = TRUE) # Select by cross-validation. predict(tree, data.frame(X)) #>           1           2           3           4           5           6  #>  0.10886377 -1.05313432  1.19081497  1.19081497 -1.05313432 -1.05313432  #>           7           8           9          10          11          12  #>  1.19081497 -1.05313432 -1.05313432 -0.08334184  0.10886377 -0.08334184  #>          13          14          15          16          17          18  #> -1.05313432  1.19081497 -0.08334184  1.19081497 -1.05313432  0.10886377  #>          19          20          21          22          23          24  #> -0.08334184 -0.08334184 -1.05313432 -0.08334184  1.19081497  1.19081497  #>          25          26          27          28          29          30  #> -0.08334184 -1.05313432  1.19081497 -1.05313432 -0.08334184  1.19081497  #>          31          32          33          34          35          36  #> -1.05313432 -0.08334184  1.19081497  1.19081497 -1.05313432 -1.05313432  #>          37          38          39          40          41          42  #> -1.05313432  1.19081497 -1.05313432  0.10886377 -0.08334184 -1.05313432  #>          43          44          45          46          47          48  #> -1.05313432 -0.08334184  1.19081497 -0.08334184 -1.05313432  1.19081497  #>          49          50          51          52          53          54  #> -1.05313432 -0.08334184  0.10886377 -1.05313432  1.19081497  1.19081497  #>          55          56          57          58          59          60  #> -1.05313432 -0.08334184 -1.05313432  1.19081497  0.10886377  1.19081497  #>          61          62          63          64          65          66  #> -1.05313432 -0.08334184 -1.05313432 -1.05313432  0.10886377 -1.05313432  #>          67          68          69          70          71          72  #> -0.08334184  1.19081497  1.19081497 -0.08334184 -1.05313432  1.19081497  #>          73          74          75          76          77          78  #> -1.05313432 -0.08334184  0.10886377  1.19081497  1.19081497 -0.08334184  #>          79          80          81          82          83          84  #>  1.19081497 -1.05313432 -1.05313432  1.19081497  1.19081497 -0.08334184  #>          85          86          87          88          89          90  #> -1.05313432  0.10886377 -0.08334184  1.19081497 -1.05313432  0.10886377  #>          91          92          93          94          95          96  #> -0.08334184 -0.08334184 -0.08334184 -0.08334184  0.10886377  1.19081497  #>          97          98          99         100         101         102  #> -1.05313432  1.19081497  1.19081497  1.19081497 -1.05313432  1.19081497  #>         103         104         105         106         107         108  #>  1.19081497  1.19081497 -0.08334184  1.19081497 -1.05313432  0.10886377  #>         109         110         111         112         113         114  #> -0.08334184 -1.05313432 -0.08334184 -1.05313432 -0.08334184 -0.08334184  #>         115         116         117         118         119         120  #> -0.08334184 -1.05313432  1.19081497 -0.08334184 -1.05313432 -0.08334184  #>         121         122         123         124         125         126  #> -1.05313432  1.19081497 -0.08334184  1.19081497 -1.05313432 -0.08334184  #>         127         128         129         130         131         132  #>  0.10886377  0.10886377  0.10886377 -1.05313432 -0.08334184 -1.05313432  #>         133         134         135         136         137         138  #> -1.05313432 -1.05313432  1.19081497  1.19081497 -0.08334184 -1.05313432  #>         139         140         141         142         143         144  #>  0.10886377  1.19081497  1.19081497  0.10886377  1.19081497  1.19081497  #>         145         146         147         148         149         150  #> -0.08334184  1.19081497 -0.08334184  1.19081497  1.19081497 -0.08334184  #>         151         152         153         154         155         156  #> -1.05313432  1.19081497  1.19081497 -0.08334184 -1.05313432  1.19081497  #>         157         158         159         160         161         162  #>  1.19081497 -1.05313432  1.19081497 -0.08334184  1.19081497  0.10886377  #>         163         164         165         166         167         168  #> -1.05313432  1.19081497  0.10886377 -0.08334184 -1.05313432 -1.05313432  #>         169         170         171         172         173         174  #>  1.19081497 -0.08334184  1.19081497  1.19081497 -1.05313432 -0.08334184  #>         175         176         177         178         179         180  #>  1.19081497 -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         181         182         183         184         185         186  #>  1.19081497 -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         187         188         189         190         191         192  #> -0.08334184 -0.08334184  0.10886377 -0.08334184  0.10886377  0.10886377  #>         193         194         195         196         197         198  #>  1.19081497 -0.08334184 -1.05313432 -0.08334184  0.10886377 -1.05313432  #>         199         200         201         202         203         204  #> -0.08334184 -1.05313432  1.19081497 -0.08334184 -0.08334184  1.19081497  #>         205         206         207         208         209         210  #>  0.10886377  1.19081497 -0.08334184  1.19081497 -1.05313432 -1.05313432  #>         211         212         213         214         215         216  #>  1.19081497 -0.08334184 -0.08334184 -1.05313432 -0.08334184 -1.05313432  #>         217         218         219         220         221         222  #> -1.05313432 -1.05313432 -1.05313432  0.10886377  1.19081497 -1.05313432  #>         223         224         225         226         227         228  #> -1.05313432 -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         229         230         231         232         233         234  #> -1.05313432  1.19081497 -1.05313432 -1.05313432  1.19081497 -0.08334184  #>         235         236         237         238         239         240  #> -0.08334184  0.10886377  1.19081497 -1.05313432 -1.05313432 -0.08334184  #>         241         242         243         244         245         246  #> -1.05313432 -1.05313432 -1.05313432  0.10886377 -1.05313432 -0.08334184  #>         247         248         249         250         251         252  #> -1.05313432 -0.08334184 -1.05313432 -0.08334184 -1.05313432  1.19081497  #>         253         254         255         256         257         258  #> -0.08334184  1.19081497 -0.08334184  0.10886377 -1.05313432  0.10886377  #>         259         260         261         262         263         264  #> -0.08334184 -1.05313432 -1.05313432 -0.08334184 -0.08334184 -1.05313432  #>         265         266         267         268         269         270  #>  0.10886377 -0.08334184  1.19081497 -0.08334184  1.19081497 -1.05313432  #>         271         272         273         274         275         276  #>  0.10886377 -1.05313432  1.19081497  1.19081497  0.10886377  1.19081497  #>         277         278         279         280         281         282  #> -0.08334184 -0.08334184 -1.05313432 -0.08334184 -1.05313432 -0.08334184  #>         283         284         285         286         287         288  #> -0.08334184 -1.05313432 -1.05313432  1.19081497 -1.05313432 -1.05313432  #>         289         290         291         292         293         294  #> -1.05313432 -0.08334184 -1.05313432  0.10886377  0.10886377 -1.05313432  #>         295         296         297         298         299         300  #> -1.05313432  1.19081497  1.19081497 -1.05313432  0.10886377 -1.05313432  #>         301         302         303         304         305         306  #>  0.10886377 -1.05313432 -1.05313432  1.19081497 -1.05313432  1.19081497  #>         307         308         309         310         311         312  #> -1.05313432 -1.05313432 -0.08334184  0.10886377 -0.08334184  0.10886377  #>         313         314         315         316         317         318  #> -1.05313432 -1.05313432  1.19081497 -1.05313432 -1.05313432  0.10886377  #>         319         320         321         322         323         324  #> -1.05313432 -0.08334184  1.19081497 -0.08334184 -1.05313432  1.19081497  #>         325         326         327         328         329         330  #>  0.10886377 -1.05313432  0.10886377 -1.05313432 -0.08334184  1.19081497  #>         331         332         333         334         335         336  #> -1.05313432 -1.05313432 -1.05313432  1.19081497 -0.08334184  1.19081497  #>         337         338         339         340         341         342  #> -1.05313432 -1.05313432 -1.05313432  1.19081497 -0.08334184 -0.08334184  #>         343         344         345         346         347         348  #> -0.08334184 -0.08334184 -0.08334184 -0.08334184 -0.08334184 -1.05313432  #>         349         350         351         352         353         354  #> -1.05313432  1.19081497 -1.05313432  1.19081497  0.10886377  0.10886377  #>         355         356         357         358         359         360  #> -1.05313432 -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         361         362         363         364         365         366  #>  1.19081497 -1.05313432  0.10886377 -1.05313432 -0.08334184 -1.05313432  #>         367         368         369         370         371         372  #>  1.19081497  1.19081497  0.10886377  1.19081497  1.19081497  0.10886377  #>         373         374         375         376         377         378  #> -0.08334184 -0.08334184  1.19081497 -0.08334184 -0.08334184  1.19081497  #>         379         380         381         382         383         384  #> -1.05313432 -1.05313432 -0.08334184  1.19081497 -0.08334184  0.10886377  #>         385         386         387         388         389         390  #>  1.19081497 -1.05313432 -1.05313432  1.19081497  1.19081497  1.19081497  #>         391         392         393         394         395         396  #> -1.05313432 -0.08334184  1.19081497  1.19081497 -1.05313432 -0.08334184  #>         397         398         399         400         401         402  #>  1.19081497  1.19081497  1.19081497 -1.05313432  0.10886377 -0.08334184  #>         403         404         405         406         407         408  #>  1.19081497 -1.05313432  0.10886377 -1.05313432 -0.08334184 -1.05313432  #>         409         410         411         412         413         414  #> -0.08334184  0.10886377  1.19081497 -0.08334184  1.19081497  1.19081497  #>         415         416         417         418         419         420  #> -0.08334184 -0.08334184  1.19081497  1.19081497  1.19081497  1.19081497  #>         421         422         423         424         425         426  #> -1.05313432 -1.05313432  0.10886377 -1.05313432 -0.08334184  0.10886377  #>         427         428         429         430         431         432  #> -1.05313432 -1.05313432 -1.05313432 -0.08334184  1.19081497  0.10886377  #>         433         434         435         436         437         438  #>  1.19081497  0.10886377 -1.05313432 -1.05313432 -0.08334184 -0.08334184  #>         439         440         441         442         443         444  #>  1.19081497 -0.08334184 -1.05313432  0.10886377  1.19081497  1.19081497  #>         445         446         447         448         449         450  #> -0.08334184 -1.05313432 -1.05313432 -1.05313432  1.19081497 -1.05313432  #>         451         452         453         454         455         456  #>  1.19081497 -1.05313432  1.19081497 -0.08334184 -0.08334184 -1.05313432  #>         457         458         459         460         461         462  #> -0.08334184 -1.05313432  0.10886377  1.19081497 -0.08334184 -0.08334184  #>         463         464         465         466         467         468  #> -0.08334184 -0.08334184 -1.05313432  0.10886377  1.19081497 -1.05313432  #>         469         470         471         472         473         474  #> -1.05313432  1.19081497 -0.08334184  0.10886377 -1.05313432 -1.05313432  #>         475         476         477         478         479         480  #>  0.10886377  1.19081497 -1.05313432 -1.05313432 -1.05313432  1.19081497  #>         481         482         483         484         485         486  #>  1.19081497  1.19081497  0.10886377 -1.05313432 -1.05313432 -0.08334184  #>         487         488         489         490         491         492  #> -0.08334184 -0.08334184 -1.05313432 -1.05313432  1.19081497 -0.08334184  #>         493         494         495         496         497         498  #> -0.08334184 -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         499         500         501         502         503         504  #>  0.10886377  1.19081497  1.19081497 -1.05313432 -0.08334184  1.19081497  #>         505         506         507         508         509         510  #> -1.05313432 -0.08334184 -1.05313432  1.19081497 -1.05313432 -0.08334184  #>         511         512         513         514         515         516  #>  1.19081497 -0.08334184  1.19081497  1.19081497  1.19081497 -1.05313432  #>         517         518         519         520         521         522  #>  1.19081497  0.10886377 -1.05313432 -1.05313432 -0.08334184  1.19081497  #>         523         524         525         526         527         528  #>  1.19081497 -0.08334184 -1.05313432 -1.05313432 -1.05313432 -1.05313432  #>         529         530         531         532         533         534  #> -1.05313432 -1.05313432  0.10886377  0.10886377 -1.05313432 -0.08334184  #>         535         536         537         538         539         540  #> -0.08334184  1.19081497 -1.05313432 -0.08334184 -1.05313432 -0.08334184  #>         541         542         543         544         545         546  #>  1.19081497 -1.05313432 -1.05313432  1.19081497  0.10886377  0.10886377  #>         547         548         549         550         551         552  #> -0.08334184 -1.05313432 -1.05313432  1.19081497 -0.08334184  1.19081497  #>         553         554         555         556         557         558  #>  1.19081497 -0.08334184 -1.05313432 -0.08334184  1.19081497  0.10886377  #>         559         560         561         562         563         564  #>  1.19081497 -1.05313432 -1.05313432  1.19081497 -0.08334184  1.19081497  #>         565         566         567         568         569         570  #>  1.19081497  0.10886377  1.19081497 -1.05313432  1.19081497 -1.05313432  #>         571         572         573         574         575         576  #>  1.19081497  1.19081497 -0.08334184 -0.08334184  1.19081497  1.19081497  #>         577         578         579         580         581         582  #> -1.05313432  1.19081497 -1.05313432  1.19081497  0.10886377  1.19081497  #>         583         584         585         586         587         588  #> -0.08334184  0.10886377 -0.08334184 -1.05313432 -0.08334184  1.19081497  #>         589         590         591         592         593         594  #> -1.05313432 -1.05313432  0.10886377 -1.05313432 -1.05313432 -0.08334184  #>         595         596         597         598         599         600  #>  1.19081497 -1.05313432 -1.05313432 -0.08334184  1.19081497 -0.08334184  #>         601         602         603         604         605         606  #> -1.05313432  1.19081497  1.19081497 -1.05313432  1.19081497 -0.08334184  #>         607         608         609         610         611         612  #> -1.05313432 -1.05313432 -0.08334184  1.19081497 -1.05313432  1.19081497  #>         613         614         615         616         617         618  #>  0.10886377 -0.08334184 -1.05313432 -1.05313432 -1.05313432 -1.05313432  #>         619         620         621         622         623         624  #> -0.08334184  1.19081497  1.19081497 -0.08334184  0.10886377  1.19081497  #>         625         626         627         628         629         630  #>  1.19081497  1.19081497  1.19081497 -0.08334184 -0.08334184 -1.05313432  #>         631         632         633         634         635         636  #>  0.10886377 -0.08334184  0.10886377 -1.05313432 -0.08334184 -1.05313432  #>         637         638         639         640         641         642  #>  1.19081497  0.10886377  1.19081497 -0.08334184  1.19081497 -1.05313432  #>         643         644         645         646         647         648  #> -1.05313432 -0.08334184 -1.05313432  0.10886377 -0.08334184 -1.05313432  #>         649         650         651         652         653         654  #> -1.05313432 -0.08334184  1.19081497  1.19081497  1.19081497 -0.08334184  #>         655         656         657         658         659         660  #> -0.08334184  1.19081497  1.19081497  1.19081497  0.10886377 -1.05313432  #>         661         662         663         664         665         666  #> -0.08334184  0.10886377 -0.08334184  1.19081497  0.10886377 -1.05313432  #>         667         668         669         670         671         672  #> -1.05313432 -1.05313432 -1.05313432 -0.08334184 -0.08334184  1.19081497  #>         673         674         675         676         677         678  #> -0.08334184  1.19081497 -1.05313432 -1.05313432 -0.08334184 -1.05313432  #>         679         680         681         682         683         684  #> -1.05313432  1.19081497 -1.05313432  1.19081497 -0.08334184 -0.08334184  #>         685         686         687         688         689         690  #> -1.05313432 -1.05313432 -0.08334184  1.19081497  1.19081497 -1.05313432  #>         691         692         693         694         695         696  #> -0.08334184 -1.05313432 -0.08334184  1.19081497 -0.08334184 -0.08334184  #>         697         698         699         700         701         702  #> -1.05313432 -1.05313432  1.19081497 -0.08334184 -1.05313432  0.10886377  #>         703         704         705         706         707         708  #> -0.08334184 -1.05313432 -1.05313432 -0.08334184 -1.05313432  0.10886377  #>         709         710         711         712         713         714  #> -1.05313432  1.19081497 -0.08334184 -1.05313432  0.10886377  1.19081497  #>         715         716         717         718         719         720  #>  0.10886377  0.10886377 -1.05313432 -1.05313432 -0.08334184 -1.05313432  #>         721         722         723         724         725         726  #>  1.19081497 -1.05313432 -1.05313432 -1.05313432 -1.05313432  1.19081497  #>         727         728         729         730         731         732  #> -1.05313432 -0.08334184 -1.05313432  1.19081497 -0.08334184 -0.08334184  #>         733         734         735         736         737         738  #>  1.19081497 -0.08334184 -1.05313432 -0.08334184 -1.05313432 -1.05313432  #>         739         740         741         742         743         744  #>  1.19081497  1.19081497  1.19081497  1.19081497 -0.08334184  0.10886377  #>         745         746         747         748         749         750  #>  0.10886377 -1.05313432 -1.05313432  1.19081497 -0.08334184  1.19081497  #>         751         752         753         754         755         756  #> -0.08334184 -1.05313432  0.10886377 -0.08334184 -0.08334184 -0.08334184  #>         757         758         759         760         761         762  #> -1.05313432 -0.08334184 -0.08334184 -0.08334184 -1.05313432 -1.05313432  #>         763         764         765         766         767         768  #> -1.05313432 -1.05313432  0.10886377 -0.08334184 -0.08334184 -1.05313432  #>         769         770         771         772         773         774  #> -1.05313432 -1.05313432 -1.05313432  1.19081497 -0.08334184 -1.05313432  #>         775         776         777         778         779         780  #> -0.08334184  1.19081497 -1.05313432  0.10886377 -1.05313432  1.19081497  #>         781         782         783         784         785         786  #> -1.05313432 -1.05313432 -0.08334184  0.10886377 -1.05313432  0.10886377  #>         787         788         789         790         791         792  #>  0.10886377  1.19081497 -0.08334184 -1.05313432 -1.05313432 -1.05313432  #>         793         794         795         796         797         798  #>  1.19081497  0.10886377 -0.08334184 -1.05313432 -0.08334184  1.19081497  #>         799         800         801         802         803         804  #>  1.19081497  1.19081497 -1.05313432  1.19081497  1.19081497  0.10886377  #>         805         806         807         808         809         810  #>  1.19081497 -1.05313432  1.19081497  0.10886377 -1.05313432 -1.05313432  #>         811         812         813         814         815         816  #>  0.10886377 -1.05313432  1.19081497  1.19081497 -1.05313432  1.19081497  #>         817         818         819         820         821         822  #>  1.19081497 -1.05313432 -1.05313432 -1.05313432 -1.05313432 -0.08334184  #>         823         824         825         826         827         828  #>  1.19081497 -0.08334184  0.10886377  1.19081497 -1.05313432 -0.08334184  #>         829         830         831         832         833         834  #> -0.08334184 -1.05313432 -0.08334184 -0.08334184  1.19081497 -0.08334184  #>         835         836         837         838         839         840  #> -1.05313432  1.19081497 -0.08334184  1.19081497 -0.08334184  0.10886377  #>         841         842         843         844         845         846  #> -1.05313432 -0.08334184  0.10886377 -0.08334184 -0.08334184 -1.05313432  #>         847         848         849         850         851         852  #> -1.05313432 -1.05313432 -0.08334184  1.19081497  1.19081497 -1.05313432  #>         853         854         855         856         857         858  #>  0.10886377 -0.08334184  1.19081497 -1.05313432 -1.05313432 -1.05313432  #>         859         860         861         862         863         864  #> -0.08334184 -1.05313432 -0.08334184  1.19081497 -0.08334184 -1.05313432  #>         865         866         867         868         869         870  #>  1.19081497 -1.05313432  0.10886377  1.19081497 -1.05313432  1.19081497  #>         871         872         873         874         875         876  #> -1.05313432 -0.08334184 -1.05313432 -0.08334184  1.19081497  1.19081497  #>         877         878         879         880         881         882  #>  1.19081497 -1.05313432  1.19081497  1.19081497 -1.05313432  1.19081497  #>         883         884         885         886         887         888  #> -1.05313432  0.10886377  0.10886377 -0.08334184  1.19081497  1.19081497  #>         889         890         891         892         893         894  #> -1.05313432  1.19081497 -0.08334184 -1.05313432  0.10886377  1.19081497  #>         895         896         897         898         899         900  #>  1.19081497  1.19081497  0.10886377 -1.05313432  1.19081497  1.19081497  #>         901         902         903         904         905         906  #> -1.05313432  1.19081497 -0.08334184  1.19081497  0.10886377 -0.08334184  #>         907         908         909         910         911         912  #>  1.19081497 -0.08334184 -1.05313432  0.10886377  1.19081497 -1.05313432  #>         913         914         915         916         917         918  #> -0.08334184 -1.05313432  1.19081497 -0.08334184 -1.05313432 -0.08334184  #>         919         920         921         922         923         924  #> -1.05313432 -1.05313432  1.19081497 -0.08334184 -1.05313432 -1.05313432  #>         925         926         927         928         929         930  #> -0.08334184 -1.05313432  1.19081497 -1.05313432 -0.08334184 -0.08334184  #>         931         932         933         934         935         936  #>  1.19081497  0.10886377 -1.05313432 -0.08334184  1.19081497 -1.05313432  #>         937         938         939         940         941         942  #>  1.19081497 -1.05313432  0.10886377 -1.05313432 -1.05313432 -0.08334184  #>         943         944         945         946         947         948  #> -1.05313432 -1.05313432 -0.08334184  1.19081497 -1.05313432  1.19081497  #>         949         950         951         952         953         954  #> -0.08334184  0.10886377 -1.05313432  1.19081497  1.19081497  1.19081497  #>         955         956         957         958         959         960  #>  1.19081497 -1.05313432 -1.05313432  1.19081497  1.19081497 -1.05313432  #>         961         962         963         964         965         966  #> -0.08334184  1.19081497  1.19081497  0.10886377  0.10886377  1.19081497  #>         967         968         969         970         971         972  #>  0.10886377 -1.05313432 -0.08334184 -0.08334184 -1.05313432 -1.05313432  #>         973         974         975         976         977         978  #> -1.05313432  1.19081497 -1.05313432  1.19081497 -1.05313432 -1.05313432  #>         979         980         981         982         983         984  #> -0.08334184  1.19081497 -1.05313432 -0.08334184 -1.05313432 -0.08334184  #>         985         986         987         988         989         990  #>  1.19081497 -0.08334184 -1.05313432 -1.05313432 -0.08334184 -1.05313432  #>         991         992         993         994         995         996  #>  0.10886377  1.19081497  1.19081497 -0.08334184  1.19081497 -0.08334184  #>         997         998         999        1000  #> -0.08334184 -1.05313432 -0.08334184 -1.05313432   ## Inference with 4 groups. results <- inference_aggtree(groupings, n_groups = 4)  summary(results$model) # Coefficient of leafk is GATE in k-th leaf. #>  #> Call: #> estimatr::lm_robust(formula = scores ~ 0 + leaf, data = data.frame(scores = scores,  #>     leaf = leaves), se_type = \"HC1\") #>  #> Standard error type:  HC1  #>  #> Coefficients: #>       Estimate Std. Error t value  Pr(>|t|) CI Lower CI Upper  DF #> leaf1 -1.05313     0.1542 -6.8316 2.468e-11  -1.3560  -0.7503 496 #> leaf2 -0.08334     0.1873 -0.4450 6.565e-01  -0.4513   0.2846 496 #> leaf3  0.10886     0.2802  0.3886 6.978e-01  -0.4416   0.6593 496 #> leaf4  1.19081     0.1995  5.9701 4.523e-09   0.7989   1.5827 496 #>  #> Multiple R-squared:  0.1472 ,\tAdjusted R-squared:  0.1403  #> F-statistic: 20.67 on 4 and 496 DF,  p-value: 9.113e-16  results$gates_diff_pairs$gates_diff # GATEs differences. #>           leaf1     leaf2    leaf3 leaf4 #> leaf1        NA        NA       NA    NA #> leaf2 0.9697925        NA       NA    NA #> leaf3 1.1619981 0.1922056       NA    NA #> leaf4 2.2439493 1.2741568 1.081951    NA results$gates_diff_pairs$holm_pvalues # leaves 1-2 not statistically different. #>              [,1]         [,2]        [,3] [,4] #> [1,]           NA           NA          NA   NA #> [2,] 2.942620e-04           NA          NA   NA #> [3,] 9.252452e-04 5.686968e-01          NA   NA #> [4,] 6.243936e-17 2.063298e-05 0.003509645   NA  ## LATEX. print(results, table = \"diff\") #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.2} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 0.85\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c} #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex]  #>  #>       & \\textit{Leaf 1} & \\textit{Leaf 2} & \\textit{Leaf 3} & \\textit{Leaf 4} \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\multirow{2}{*}{GATEs} & -1.053 & -0.083 & 0.109 & 1.191 \\\\ #>       & [-1.355, -0.751] & [-0.45, 0.284] & [-0.44, 0.658] & [0.801, 1.581] \\\\  #>  #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\textit{Leaf 1} & NA & NA & NA & NA \\\\ #>             & (NA) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 2} & 0.97 & NA & NA & NA \\\\ #>             & (0) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 3} & 1.162 & 0.192 & NA & NA \\\\ #>             & (0.001) & (0.569) & (NA) & (NA) \\\\  #>       \\textit{Leaf 4} & 2.244 & 1.274 & 1.082 & NA \\\\ #>             & (0) & (0) & (0.004) & (NA) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Point estimates and $95\\%$ confidence intervals for the GATEs. Leaves are sorted in increasing order of the GATEs. Additionally, differences in the GATEs across all pairs of leaves are displayed. p-values to test the null hypothesis that a single difference is zero are adjusted using Holm's procedure and reported in parenthesis under each point estimate.} #>     \\label{table:differences.gates} #>     \\end{table} #> \\endgroup  #>  print(results, table = \"avg_char\")# } #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.1} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 1\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c c c c c } #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>       & \\multicolumn{2}{c}{\\textit{Leaf 1}} & \\multicolumn{2}{c}{\\textit{Leaf 2}} & \\multicolumn{2}{c}{\\textit{Leaf 3}} & \\multicolumn{2}{c}{\\textit{Leaf 4}} \\\\\\cmidrule{2-3} \\cmidrule{4-5} \\cmidrule{6-7} \\cmidrule{8-9}  #>       & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\texttt{x1} & 0.025 & (0.072) & 0.035 & (0.096) & -0.179 & (0.133) & 0.086 & (0.082) \\\\  #>       \\texttt{x2} & -1.131 & (0.042) & 0.209 & (0.016) & -0.237 & (0.014) & 1.101 & (0.04) \\\\  #>       \\texttt{x3} & -0.009 & (0.071) & 0.088 & (0.092) & -0.066 & (0.13) & -0.047 & (0.092) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Average characteristics of units in each leaf, obtained by regressing each covariate on a set of dummies denoting leaf membership. Standard errors are estimated via the Eicker-Huber-White estimator. Leaves are sorted in increasing order of the GATEs.} #>     \\label{table:average.characteristics.leaves} #>     \\end{table} #> \\endgroup  #>"},{"path":"/reference/causal_ols_rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"Obtains point estimates standard errors group average treatment effects (GATEs), groups correspond leaves rpart object. Additionally, performs hypothesis testing.","code":""},{"path":"/reference/causal_ols_rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"","code":"causal_ols_rpart(tree, y, D, X, method = \"aipw\", scores = NULL)"},{"path":"/reference/causal_ols_rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"tree rpart object. y Outcome vector. D Treatment assignment vector X Covariate matrix (intercept). method Either \"raw\" \"aipw\", defines outcome used regression. scores Optional, vector scores used regression. Useful save computational time scores already estimated. Ignored method == \"raw\".","code":""},{"path":"/reference/causal_ols_rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"list storing: model model fitted get point estimates standard errors GATEs, lm_robust object. gates_diff_pairs Results testing whether GATEs differ across pairs leaves. list storing GATEs differences p-values adjusted using Holm's procedure (check p.adjust). NULL tree consists root . scores Vector doubly robust scores. NULL method == 'raw'.","code":""},{"path":[]},{"path":"/reference/causal_ols_rpart.html","id":"point-estimates-and-standard-errors-for-the-gates","dir":"Reference","previous_headings":"","what":"Point estimates and standard errors for the GATEs","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"GATEs standard errors obtained fitting appropriate linear model. method == \"raw\", estimate via OLS following: $$Y_i = \\sum_{l = 1}^{|T|} L_{, l} \\gamma_l + \\sum_{l = 1}^{|T|} L_{, l} D_i \\beta_l + \\epsilon_i$$ L_{, l} dummy variable equal one -th unit falls l-th leaf tree, |T| number groups. treatment randomly assigned, one can show betas identify GATE leaf. However, true observational studies due selection treatment. case, user expected use method == \"aipw\" run following regression: $$score_i = \\sum_{l = 1}^{|T|} L_{, l} \\beta_l + \\epsilon_i$$ score_i doubly-robust scores constructed via honest regression forests 5-fold cross fitting (unless user specifies argument scores). way, betas identify GATEs. Regardless method, standard errors estimated via Eicker-Huber-White estimator. tree consists root , causal_ols_rpart regresses y constant D method == \"raw\", regresses doubly-robust scores constant method == \"aipw\". way, get estimate overall average treatment effect.","code":""},{"path":"/reference/causal_ols_rpart.html","id":"hypothesis-testing","dir":"Reference","previous_headings":"","what":"Hypothesis testing","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"causal_ols_rpart uses standard errors obtained fitting linear models test hypotheses GATEs different across pairs leaves. , adjust p-values account multiple hypotheses testing using Holm's procedure.","code":""},{"path":"/reference/causal_ols_rpart.html","id":"caution-on-inference","dir":"Reference","previous_headings":"","what":"Caution on Inference","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"\"honesty\" necessary requirement get valid inference. Thus, observations y, D, X must used construct tree scores.","code":""},{"path":"/reference/causal_ols_rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/causal_ols_rpart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"Riccardo Di Francesco","code":""},{"path":"/reference/causal_ols_rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation and Inference about the GATEs with rpart Objects — causal_ols_rpart","text":"","code":"## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Split the sample. splits <- sample_split(length(y), training_frac = 0.5) training_idx <- splits$training_idx honest_idx <- splits$honest_idx  y_tr <- y[training_idx] D_tr <- D[training_idx] X_tr <- X[training_idx, ]  y_hon <- y[honest_idx] D_hon <- D[honest_idx] X_hon <- X[honest_idx, ]  ## Construct a tree using training sample. library(rpart) tree <- rpart(y ~ ., data = data.frame(\"y\" = y_tr, X_tr), maxdepth = 2)  ## Estimate GATEs in each node (internal and terminal) using honest sample. results <- causal_ols_rpart(tree, y_hon, D_hon, X_hon, method = \"raw\")  summary(results$model) # Coefficient of leafk:D is GATE in k-th leaf. #>  #> Call: #> estimatr::lm_robust(formula = y ~ 0 + leaf + D:leaf, data = data.frame(y = y,  #>     leaf = leaves, D = D), se_type = \"HC1\") #>  #> Standard error type:  HC1  #>  #> Coefficients: #>          Estimate Std. Error  t value  Pr(>|t|) CI Lower CI Upper  DF #> leaf1   -0.036996    0.12751 -0.29014 7.718e-01  -0.2875   0.2135 492 #> leaf2    0.477702    0.19133  2.49681 1.286e-02   0.1018   0.8536 492 #> leaf3   -0.001513    0.09483 -0.01595 9.873e-01  -0.1878   0.1848 492 #> leaf4    0.814105    0.21189  3.84217 1.379e-04   0.3978   1.2304 492 #> leaf1:D -1.508032    0.20002 -7.53928 2.293e-13  -1.9010  -1.1150 492 #> leaf2:D -1.110904    0.27575 -4.02865 6.497e-05  -1.6527  -0.5691 492 #> leaf3:D  0.555771    0.14146  3.92889 9.755e-05   0.2778   0.8337 492 #> leaf4:D  1.003031    0.35536  2.82259 4.957e-03   0.3048   1.7012 492 #>  #> Multiple R-squared:  0.2944 ,\tAdjusted R-squared:  0.2829  #> F-statistic: 25.03 on 8 and 492 DF,  p-value: < 2.2e-16  results$gates_diff_pair$gates_diff # GATEs differences. #>           leaf1    leaf2     leaf3 leaf4 #> leaf1        NA       NA        NA    NA #> leaf2 0.3971281       NA        NA    NA #> leaf3 2.0638027 1.666675        NA    NA #> leaf4 2.5110626 2.113935 0.4472599    NA results$gates_diff_pair$holm_pvalues # leaves 1-2 and 3-4 not statistically different. #>              [,1]         [,2]      [,3] [,4] #> [1,]           NA           NA        NA   NA #> [2,] 4.856388e-01           NA        NA   NA #> [3,] 2.413800e-15 4.669980e-07        NA   NA #> [4,] 7.666574e-09 1.015841e-05 0.4856388   NA"},{"path":"/reference/descriptive_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","title":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","text":"Computes sample averages standard deviations covariates across treatment arms.","code":""},{"path":"/reference/descriptive_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","text":"","code":"descriptive_arm(X, D)"},{"path":"/reference/descriptive_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","text":"X Covariate matrix (intercept). D Treatment assignment vector.","code":""},{"path":"/reference/descriptive_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","text":"4xp array, storing desired statistics.","code":""},{"path":"/reference/descriptive_arm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Descriptive Statistics by Treatment Arm (Internal Use) — descriptive_arm","text":"Sample means standard deviations across treatment arms first, useful insight assess covariate balance.","code":""},{"path":"/reference/dr_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Doubly-Robust Scores — dr_scores","title":"Doubly-Robust Scores — dr_scores","text":"Constructs doubly-robust scores via K-fold cross-fitting.","code":""},{"path":"/reference/dr_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Doubly-Robust Scores — dr_scores","text":"","code":"dr_scores(y, D, X, k = 5)"},{"path":"/reference/dr_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Doubly-Robust Scores — dr_scores","text":"y Outcome vector. D Treatment assignment vector. X Covariate matrix (intercept). k Number folds.","code":""},{"path":"/reference/dr_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Doubly-Robust Scores — dr_scores","text":"vector scores.","code":""},{"path":"/reference/dr_scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Doubly-Robust Scores — dr_scores","text":"Honest regression forests used estimate propensity score conditional mean function outcome.","code":""},{"path":"/reference/dr_scores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Doubly-Robust Scores — dr_scores","text":"Riccardo Di Francesco","code":""},{"path":"/reference/estimate_rpart.html","id":null,"dir":"Reference","previous_headings":"","what":"GATE Estimation with rpart Objects — estimate_rpart","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"Replaces node predictions rpart object using external data estimate group average treatment effects (GATEs).","code":""},{"path":"/reference/estimate_rpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"","code":"estimate_rpart(tree, y, D, X, method = \"aipw\", scores = NULL)"},{"path":"/reference/estimate_rpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"tree rpart object. y Outcome vector. D Treatment assignment vector. X Covariate matrix (intercept). method Either \"raw\" \"aipw\", controls node predictions replaced. scores Optional, vector scores used replacing node predictions. Useful save computational time scores already estimated. Ignored method == \"raw\".","code":""},{"path":"/reference/estimate_rpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"tree node predictions replaced, rpart object, scores (method == \"raw\", NULL).","code":""},{"path":"/reference/estimate_rpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"method == \"raw\", estimate_rpart replaces node predictions differences sample average observed outcomes treated units sample average observed outcomes control units node, unbiased estimator GATEs assignment treatment randomized. method == \"aipw\", estimate_rpart replaces node predictions sample averages doubly-robust scores node. valid estimator GATEs observational studies. Honest regression forests 5-fold cross fitting used estimate propensity score conditional mean function outcome (unless user specifies argument scores). estimate_rpart allows user implement \"honest\" estimation. observations y, D X used construct tree, new predictions honest sense Athey Imbens (2016). get standard errors tree's estimates, please use causal_ols_rpart.","code":""},{"path":"/reference/estimate_rpart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/estimate_rpart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"Riccardo Di Francesco","code":""},{"path":"/reference/estimate_rpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GATE Estimation with rpart Objects — estimate_rpart","text":"","code":"## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Split the sample. splits <- sample_split(length(y), training_frac = 0.5) training_idx <- splits$training_idx honest_idx <- splits$honest_idx  y_tr <- y[training_idx] D_tr <- D[training_idx] X_tr <- X[training_idx, ]  y_hon <- y[honest_idx] D_hon <- D[honest_idx] X_hon <- X[honest_idx, ]  ## Construct a tree using training sample. library(rpart) tree <- rpart(y ~ ., data = data.frame(\"y\" = y_tr, X_tr), maxdepth = 2)  ## Estimate GATEs in each node (internal and terminal) using honest sample. new_tree <- estimate_rpart(tree, y_hon, D_hon, X_hon, method = \"raw\") new_tree$tree #> n= 500  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #> 1) root 500 848.77870 -0.1196941   #>   2) x2< -0.2670246 208 294.70990 -1.3627760   #>     4) x1< 0.111117 116 149.74660 -1.5080320 * #>     5) x1>=0.111117 92 108.62540 -1.1109040 * #>   3) x2>=-0.2670246 292 425.26540  0.5981272   #>     6) x1< 1.135506 231 289.47460  0.5557710 * #>     7) x1>=1.135506 61  70.06308  1.0030310 *"},{"path":"/reference/expand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate Matrix Expansion — expand_df","title":"Covariate Matrix Expansion — expand_df","text":"Expands covariate matrix, adding interactions polynomials. particularly useful penalized regressions.","code":""},{"path":"/reference/expand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate Matrix Expansion — expand_df","text":"","code":"expand_df(X, int_order = 2, poly_order = 4, threshold = 0)"},{"path":"/reference/expand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate Matrix Expansion — expand_df","text":"X Covariate matrix (intercept). int_order Order interactions added. Set equal one interactions desired. poly_order Order polynomials added. Set equal one polynomials desired. threshold Drop binary variables representing less threshold% population. Useful speed computation.","code":""},{"path":"/reference/expand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate Matrix Expansion — expand_df","text":"expanded covariate matrix, data frame.","code":""},{"path":"/reference/expand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariate Matrix Expansion — expand_df","text":"expand_df assumes categorical variables coded factors. Also, missing values allowed.","code":""},{"path":"/reference/get_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Leaves — get_leaves","title":"Number of Leaves — get_leaves","text":"Extracts number leaves rpart object.","code":""},{"path":"/reference/get_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Leaves — get_leaves","text":"","code":"get_leaves(tree)"},{"path":"/reference/get_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Leaves — get_leaves","text":"tree rpart object.","code":""},{"path":"/reference/get_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Leaves — get_leaves","text":"number leaves.","code":""},{"path":[]},{"path":"/reference/get_leaves.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of Leaves — get_leaves","text":"Riccardo Di Francesco","code":""},{"path":"/reference/get_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Leaves — get_leaves","text":"","code":"## Generate data. set.seed(1986)  n <- 3000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k))  y <- exp(X[, 1]) + 2 * X[, 2] * X[, 2] > 0 + rnorm(n)  ## Construct tree. library(rpart) tree <- rpart(y ~ ., data = data.frame(y, X))  ## Extract number of leaves. n_leaves <- get_leaves(tree) n_leaves #> [1] 8"},{"path":"/reference/leaf_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"Leaf Membership — leaf_membership","title":"Leaf Membership — leaf_membership","text":"Constructs variable encodes leaf rpart object units given data frame fall.","code":""},{"path":"/reference/leaf_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leaf Membership — leaf_membership","text":"","code":"leaf_membership(tree, X)"},{"path":"/reference/leaf_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leaf Membership — leaf_membership","text":"tree rpart object. X Covariate matrix (intercept).","code":""},{"path":"/reference/leaf_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leaf Membership — leaf_membership","text":"factor whose levels denote leaf unit falls. Leaves ordered increasing order predictions (negative positive).","code":""},{"path":[]},{"path":"/reference/leaf_membership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Leaf Membership — leaf_membership","text":"Riccardo Di Francesco","code":""},{"path":"/reference/leaf_membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leaf Membership — leaf_membership","text":"","code":"## Generate data. set.seed(1986)  n <- 3000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k))  y <- exp(X[, 1]) + 2 * X[, 2] * X[, 2] > 0 + rnorm(n)  ## Construct tree. library(rpart) tree <- rpart(y ~ ., data = data.frame(y, X))  ## Extract number of leaves. leaves_factor <- leaf_membership(tree, X) leaves_factor #>    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16  #>    5    7    7    2    7    2    7    2    1    1    7    5    7    7    7    5  #>   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32  #>    7    7    7    2    6    7    1    4    2    7    5    7    7    7    4    7  #>   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48  #>    7    1    7    5    2    7    7    7    7    7    8    7    6    8    7    2  #>   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64  #>    6    2    7    6    7    7    7    6    5    3    5    7    5    7    3    8  #>   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80  #>    3    7    4    7    8    7    7    5    7    3    7    5    7    5    6    8  #>   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96  #>    3    7    7    6    7    2    3    7    3    5    5    7    7    7    8    7  #>   97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112  #>    7    5    4    1    7    7    7    1    7    5    2    7    2    4    8    3  #>  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  #>    7    4    7    8    7    7    7    7    4    1    5    1    7    7    2    7  #>  129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144  #>    7    3    6    7    7    8    4    7    7    1    7    7    2    8    7    6  #>  145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160  #>    2    7    7    8    7    7    6    1    7    8    1    8    7    4    7    4  #>  161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176  #>    7    7    7    7    7    2    7    7    7    7    8    3    6    1    5    1  #>  177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192  #>    7    4    7    3    7    7    6    4    4    7    7    6    6    7    7    7  #>  193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208  #>    7    7    5    5    5    3    6    7    6    7    5    7    2    3    7    7  #>  209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224  #>    8    5    7    4    7    4    7    3    6    7    7    2    7    7    8    2  #>  225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240  #>    1    7    8    7    8    7    8    7    7    7    4    7    7    5    7    7  #>  241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256  #>    7    1    7    7    2    2    4    3    8    7    8    3    7    7    7    5  #>  257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272  #>    5    7    5    6    4    7    8    7    7    7    7    7    3    1    7    7  #>  273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288  #>    7    4    5    7    7    4    2    8    7    8    7    7    7    1    7    3  #>  289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304  #>    7    7    7    8    7    6    6    6    6    1    7    6    6    1    7    8  #>  305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320  #>    5    7    1    5    6    4    7    4    3    4    1    7    6    5    7    7  #>  321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336  #>    7    4    7    7    7    7    7    7    3    6    8    7    5    6    8    5  #>  337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352  #>    2    7    7    5    3    7    1    7    7    7    6    8    5    7    7    7  #>  353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368  #>    7    7    7    8    7    6    7    7    3    4    4    8    7    7    4    3  #>  369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384  #>    7    7    7    7    3    7    2    5    4    2    7    3    5    3    5    4  #>  385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400  #>    7    7    2    1    7    7    7    5    6    7    3    4    2    7    7    7  #>  401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416  #>    2    6    5    7    7    7    8    7    7    1    2    7    7    6    6    8  #>  417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432  #>    3    2    2    7    6    7    7    8    1    3    1    7    7    4    7    2  #>  433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448  #>    8    2    7    7    6    7    7    7    6    7    7    7    5    3    5    7  #>  449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464  #>    3    6    8    8    7    8    7    2    2    7    8    5    7    7    6    8  #>  465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480  #>    6    7    7    7    5    7    7    4    7    7    6    4    7    7    4    7  #>  481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496  #>    7    7    7    7    2    6    7    7    7    7    6    7    7    5    7    8  #>  497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512  #>    7    3    7    7    7    5    1    4    8    7    8    7    2    7    1    8  #>  513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528  #>    8    3    8    6    7    5    1    3    7    8    7    7    7    7    3    7  #>  529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544  #>    7    3    7    2    3    7    2    3    7    7    5    1    4    7    7    7  #>  545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560  #>    2    7    3    7    3    7    3    7    7    2    7    5    6    8    4    3  #>  561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576  #>    7    7    7    7    8    7    4    7    5    7    7    7    3    5    3    6  #>  577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592  #>    3    7    8    8    1    7    7    7    6    6    3    7    2    2    3    1  #>  593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608  #>    4    7    7    7    7    2    8    6    8    1    2    7    7    7    3    5  #>  609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624  #>    3    7    3    7    7    7    3    7    4    2    7    8    7    4    2    5  #>  625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640  #>    7    7    7    7    7    7    7    7    3    2    7    3    7    5    6    5  #>  641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656  #>    5    3    5    2    5    5    7    3    7    6    7    7    8    8    7    7  #>  657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672  #>    6    7    7    4    7    7    5    7    7    5    7    7    7    4    6    7  #>  673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688  #>    7    7    7    7    7    5    7    7    6    7    1    6    1    1    6    1  #>  689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704  #>    7    1    7    5    2    5    7    3    7    7    2    5    1    1    2    5  #>  705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720  #>    8    7    7    2    7    7    7    8    3    3    6    4    7    5    7    7  #>  721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736  #>    1    6    8    7    7    5    6    2    7    4    4    7    5    1    7    3  #>  737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752  #>    7    5    4    7    7    7    7    5    1    5    7    7    7    7    7    7  #>  753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768  #>    1    7    7    8    7    4    1    7    2    3    7    4    7    7    8    3  #>  769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784  #>    2    1    7    8    6    7    2    6    5    7    2    5    3    7    7    3  #>  785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800  #>    5    1    6    7    5    7    7    5    7    7    7    7    3    8    7    7  #>  801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816  #>    5    4    7    7    3    2    7    6    7    2    4    4    7    2    6    7  #>  817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832  #>    2    7    8    8    3    5    3    4    7    7    4    6    7    7    4    7  #>  833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848  #>    2    6    7    2    7    7    7    1    5    7    6    1    6    7    8    5  #>  849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864  #>    7    6    7    5    7    7    3    7    7    2    8    7    7    7    4    3  #>  865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880  #>    7    7    6    3    4    4    2    5    5    8    7    7    1    7    6    7  #>  881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896  #>    8    3    2    7    7    4    7    7    4    6    8    7    7    5    7    7  #>  897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912  #>    7    2    7    7    7    7    4    3    7    1    7    7    6    2    7    7  #>  913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928  #>    7    7    5    7    6    7    7    4    8    1    7    7    4    3    3    7  #>  929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944  #>    7    5    7    5    7    8    7    7    7    3    3    6    1    7    6    7  #>  945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960  #>    7    8    7    7    5    7    3    6    7    6    7    5    1    7    7    7  #>  961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976  #>    5    7    8    7    2    2    7    8    2    7    7    2    7    2    1    7  #>  977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992  #>    6    4    4    7    7    7    7    7    7    6    6    7    6    7    3    7  #>  993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008  #>    5    7    7    8    7    6    8    7    8    3    7    7    2    1    7    6  #> 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024  #>    2    5    5    5    2    7    7    7    1    3    5    7    4    7    7    7  #> 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040  #>    7    2    7    2    7    7    5    7    7    7    2    6    6    7    2    8  #> 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056  #>    7    6    2    5    7    3    6    7    6    7    5    6    7    7    1    7  #> 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072  #>    5    7    8    7    8    7    3    4    8    1    3    7    7    8    1    7  #> 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088  #>    1    7    3    7    7    7    7    6    6    7    7    7    4    3    8    7  #> 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104  #>    1    3    7    3    7    3    8    7    2    7    7    7    5    7    7    7  #> 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120  #>    7    7    8    3    7    2    7    6    5    7    3    1    7    7    4    7  #> 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136  #>    2    7    5    7    4    7    3    8    8    3    7    3    3    4    7    7  #> 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152  #>    7    2    3    7    7    3    7    7    7    7    7    7    7    7    8    7  #> 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168  #>    7    8    6    7    7    2    7    7    7    5    4    7    5    7    2    6  #> 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184  #>    7    7    7    7    6    7    7    8    7    8    7    8    7    8    7    2  #> 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200  #>    7    3    7    8    3    7    8    3    7    7    4    7    3    1    7    2  #> 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216  #>    7    7    7    7    5    7    7    7    1    1    7    7    7    1    7    5  #> 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232  #>    2    2    4    3    7    5    8    2    7    6    7    4    6    7    2    6  #> 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248  #>    7    7    7    3    7    1    2    7    1    1    1    5    4    7    2    3  #> 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264  #>    5    8    2    7    7    7    7    3    2    3    5    2    6    7    3    6  #> 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280  #>    5    7    7    8    7    1    8    4    7    7    8    7    7    7    4    7  #> 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296  #>    2    7    7    1    6    7    4    2    6    7    2    5    3    8    2    7  #> 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312  #>    7    2    8    4    5    1    6    7    1    7    3    4    7    5    7    8  #> 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328  #>    4    1    7    5    6    3    6    7    7    7    2    7    8    2    3    6  #> 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344  #>    7    7    8    1    2    7    5    7    4    2    4    7    7    7    7    7  #> 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360  #>    8    7    7    4    2    7    1    7    8    3    2    8    7    4    7    1  #> 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376  #>    7    1    3    8    5    4    7    7    3    7    7    3    7    7    7    7  #> 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392  #>    7    7    2    6    7    7    7    5    7    4    6    7    7    7    3    7  #> 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408  #>    7    7    2    7    7    7    7    2    5    7    7    1    8    2    7    6  #> 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424  #>    7    3    7    7    7    7    8    7    7    7    7    7    1    3    5    2  #> 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440  #>    7    8    8    6    4    7    7    8    7    3    4    8    7    7    7    7  #> 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456  #>    1    3    7    7    7    4    1    2    7    1    7    6    7    7    8    1  #> 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472  #>    7    6    3    7    7    7    7    7    6    3    7    4    1    7    7    3  #> 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488  #>    6    2    5    7    4    6    6    7    7    7    3    2    8    5    7    7  #> 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504  #>    4    2    7    7    7    6    7    2    7    4    3    7    7    8    8    7  #> 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520  #>    1    3    1    7    6    7    7    7    7    7    7    3    7    5    2    8  #> 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536  #>    7    7    7    7    2    2    4    4    2    1    5    5    6    8    5    7  #> 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552  #>    6    7    6    7    7    6    6    7    3    5    7    6    4    7    5    7  #> 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568  #>    7    7    2    7    7    5    7    3    6    7    5    7    7    5    7    1  #> 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584  #>    7    6    7    7    7    8    7    7    4    7    2    7    3    7    7    3  #> 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600  #>    7    3    7    7    2    3    8    6    6    5    7    4    5    7    7    7  #> 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616  #>    4    7    7    6    7    7    6    5    7    7    6    7    5    8    1    5  #> 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632  #>    6    1    5    7    7    3    3    7    7    7    7    3    7    5    5    7  #> 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648  #>    5    1    3    2    7    8    7    7    7    2    4    8    1    3    5    2  #> 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664  #>    4    3    7    7    7    7    7    7    7    7    8    3    7    3    3    7  #> 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680  #>    3    6    1    5    4    5    7    7    5    7    1    2    3    6    6    7  #> 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696  #>    1    7    7    7    6    1    7    7    7    6    7    1    7    7    3    7  #> 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712  #>    3    8    7    7    2    5    5    5    2    7    2    8    4    7    7    4  #> 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728  #>    8    7    5    8    6    4    7    6    7    4    5    4    2    7    4    7  #> 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744  #>    2    7    7    7    7    7    1    7    4    2    7    7    7    7    7    3  #> 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760  #>    8    4    2    7    7    7    7    6    8    7    7    7    4    7    7    7  #> 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776  #>    1    4    8    3    3    3    7    2    1    6    2    7    7    6    7    7  #> 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792  #>    2    5    2    7    1    1    7    5    1    3    8    7    7    6    1    6  #> 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808  #>    7    3    7    5    7    7    7    7    2    7    7    3    7    3    7    5  #> 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824  #>    6    2    5    1    7    7    4    7    7    2    6    6    3    7    7    7  #> 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840  #>    5    7    1    7    5    3    7    7    7    7    8    7    8    7    3    5  #> 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856  #>    1    8    3    8    7    4    8    2    7    7    7    1    5    7    7    2  #> 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872  #>    6    2    5    2    5    7    7    4    7    1    5    7    2    7    6    8  #> 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888  #>    5    8    7    7    7    1    7    7    5    7    2    5    3    7    7    7  #> 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904  #>    8    7    3    6    5    7    7    7    8    6    7    7    4    7    7    7  #> 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920  #>    5    7    7    3    4    5    7    2    7    2    7    7    3    7    4    4  #> 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936  #>    7    7    4    2    3    1    7    2    8    7    7    3    2    7    7    5  #> 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952  #>    7    6    8    6    1    8    1    5    5    7    1    7    5    8    1    7  #> 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968  #>    7    7    7    1    2    7    7    2    7    7    7    3    8    7    5    4  #> 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984  #>    7    7    4    2    5    7    1    7    2    3    5    7    4    7    1    7  #> 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000  #>    7    7    6    2    8    1    3    7    7    7    7    7    7    4    7    1  #> 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016  #>    4    5    3    7    7    4    4    7    5    7    6    8    4    7    7    6  #> 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032  #>    7    2    7    7    2    8    7    7    2    6    8    3    7    6    6    1  #> 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048  #>    7    2    2    7    7    7    6    7    7    6    7    8    7    8    4    7  #> 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064  #>    2    4    7    7    1    7    3    2    7    7    2    8    5    6    7    4  #> 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080  #>    7    8    5    3    4    5    7    1    4    7    7    2    5    7    2    6  #> 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096  #>    1    8    7    3    2    7    2    2    7    7    7    2    8    7    7    5  #> 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112  #>    7    2    3    4    3    7    2    2    4    7    7    7    7    7    5    1  #> 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128  #>    4    4    7    7    7    5    5    7    6    7    7    7    7    5    7    7  #> 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144  #>    8    2    5    4    7    4    3    7    7    8    7    1    7    2    7    7  #> 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160  #>    7    7    7    8    2    7    1    2    3    7    7    7    8    7    4    4  #> 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176  #>    3    8    7    5    6    1    1    7    7    2    6    6    1    7    7    7  #> 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192  #>    7    7    5    4    4    7    8    6    2    7    7    7    7    7    3    7  #> 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208  #>    7    7    3    4    7    4    8    7    3    2    5    8    2    4    7    7  #> 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224  #>    7    1    7    7    5    4    7    7    7    7    7    7    2    7    6    6  #> 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240  #>    4    8    7    7    6    4    6    5    7    7    4    3    7    8    7    5  #> 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256  #>    8    7    7    1    1    3    8    2    7    7    6    7    3    2    7    5  #> 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272  #>    1    8    7    7    3    7    7    7    8    8    7    5    5    7    7    5  #> 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288  #>    6    7    6    4    7    7    6    7    7    1    7    7    1    7    2    7  #> 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304  #>    7    7    7    4    2    4    7    7    5    7    2    7    7    7    3    7  #> 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320  #>    7    7    3    7    5    7    7    1    3    8    3    7    6    7    7    7  #> 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336  #>    3    7    1    8    4    1    3    7    7    1    7    3    6    8    7    7  #> 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352  #>    7    4    7    8    7    5    5    7    2    4    7    1    7    1    1    8  #> 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368  #>    8    7    7    7    7    7    7    1    7    5    5    7    6    4    3    7  #> 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384  #>    7    4    7    8    5    7    7    5    5    3    3    7    2    5    7    4  #> 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400  #>    7    7    5    8    7    7    7    4    6    7    7    7    7    5    7    2  #> 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416  #>    7    4    7    7    1    7    6    7    3    7    7    6    7    6    8    5  #> 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432  #>    7    7    4    7    7    7    6    7    7    7    7    6    7    7    7    7  #> 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448  #>    7    1    3    7    6    2    6    1    7    5    7    7    7    6    8    3  #> 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464  #>    7    7    7    7    7    8    7    7    7    7    7    7    1    3    7    7  #> 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480  #>    7    2    3    7    3    2    7    3    6    7    8    8    5    7    6    7  #> 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496  #>    1    6    7    7    7    2    7    2    4    4    7    7    7    4    7    8  #> 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512  #>    3    1    7    4    7    7    6    3    7    7    3    2    5    2    2    3  #> 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528  #>    1    4    7    7    3    7    1    1    7    5    3    8    4    7    7    8  #> 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544  #>    2    6    5    8    7    4    7    7    5    1    7    1    5    6    5    4  #> 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560  #>    7    7    5    2    7    7    1    6    7    2    8    6    6    4    8    7  #> 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576  #>    7    6    5    7    3    8    3    7    5    7    7    2    8    5    7    7  #> 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592  #>    7    3    7    3    2    5    4    7    7    7    8    1    5    7    6    4  #> 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608  #>    8    7    6    3    7    7    8    7    7    2    5    7    5    7    7    7  #> 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624  #>    1    2    4    5    4    7    1    3    1    4    7    4    7    8    7    3  #> 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640  #>    5    3    7    7    1    7    4    7    4    5    7    7    4    7    7    8  #> 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656  #>    7    7    1    3    7    6    7    7    8    1    5    5    4    6    2    5  #> 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672  #>    7    7    7    3    6    7    2    7    1    7    7    7    7    7    5    7  #> 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688  #>    7    3    7    7    7    7    3    7    5    5    7    4    5    7    1    7  #> 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704  #>    5    7    7    7    8    7    8    2    7    7    7    7    7    3    7    1  #> 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720  #>    4    8    8    7    7    5    6    8    7    2    1    7    7    6    5    2  #> 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736  #>    7    7    7    2    3    7    7    7    6    7    5    2    7    3    5    7  #> 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752  #>    7    7    7    4    7    7    5    7    7    6    6    7    7    7    8    7  #> 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768  #>    7    3    7    2    7    7    2    7    8    7    7    7    8    2    1    7  #> 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784  #>    7    2    7    7    1    4    7    3    2    7    6    7    7    7    4    6  #> 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800  #>    7    7    8    7    6    7    3    7    4    7    7    3    8    1    7    8  #> 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816  #>    7    7    3    7    7    3    7    2    6    7    7    7    7    7    7    5  #> 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832  #>    7    3    7    4    5    7    8    7    7    7    4    1    4    4    7    8  #> 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848  #>    7    7    4    6    4    7    7    7    3    3    5    7    7    7    1    3  #> 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864  #>    7    7    1    7    4    8    7    7    1    7    3    6    7    5    3    6  #> 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880  #>    7    8    7    4    2    3    4    7    2    7    8    5    2    7    5    7  #> 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896  #>    3    5    2    8    7    7    7    4    6    3    4    7    2    7    2    4  #> 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912  #>    7    7    7    7    7    4    7    4    1    7    2    7    7    7    7    2  #> 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928  #>    7    7    7    8    7    7    7    7    6    7    1    1    3    1    7    6  #> 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944  #>    2    7    7    6    7    2    2    7    2    3    5    5    8    7    7    4  #> 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960  #>    7    1    5    5    2    7    1    8    7    7    7    7    5    7    7    7  #> 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976  #>    7    7    5    2    1    7    7    7    4    7    7    1    1    1    4    5  #> 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992  #>    7    7    7    7    7    5    8    3    5    8    3    7    5    1    2    8  #> 2993 2994 2995 2996 2997 2998 2999 3000  #>    1    6    2    6    8    4    7    7  #> Levels: 1 2 3 4 5 6 7 8"},{"path":"/reference/log_ratio_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","title":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","text":"Computes measure difference dispersion covariate distributions across treatment arms.","code":""},{"path":"/reference/log_ratio_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","text":"","code":"log_ratio_sd(X, D)"},{"path":"/reference/log_ratio_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","text":"X Covariate matrix (intercept). D Treatment assignment vector.","code":""},{"path":"/reference/log_ratio_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","text":"1xp data frame storing logarithm ratio standard deviations covariate.","code":""},{"path":"/reference/log_ratio_sd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log Ratio of Standard Deviations (Internal Use) — log_ratio_sd","text":"Log ratio standard deviations computed logarithm ratio within-arm standard deviations.","code":""},{"path":"/reference/node_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"Node Membership — node_membership","title":"Node Membership — node_membership","text":"Constructs binary variable encodes whether observation falls particular node rpart object.","code":""},{"path":"/reference/node_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node Membership — node_membership","text":"","code":"node_membership(tree, X, node)"},{"path":"/reference/node_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node Membership — node_membership","text":"tree rpart object. X Covariate matrix (intercept). node Number node.","code":""},{"path":"/reference/node_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Node Membership — node_membership","text":"Logical vector denoting whether observation X falls node.","code":""},{"path":[]},{"path":"/reference/node_membership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Node Membership — node_membership","text":"Riccardo Di Francesco","code":""},{"path":"/reference/node_membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node Membership — node_membership","text":"","code":"## Generate data. set.seed(1986)  n <- 3000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k))  y <- exp(X[, 1]) + 2 * X[, 2] * X[, 2] > 0 + rnorm(n)  ## Construct tree. library(rpart) tree <- rpart(y ~ ., data = data.frame(y, X))  ## Extract number of leaves. is_in_third_node <- node_membership(tree, X, 3) is_in_third_node},{"path":"/reference/normalized_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Differences (Internal Use) — normalized_diff","title":"Normalized Differences (Internal Use) — normalized_diff","text":"Computes measure difference locations covariate distributions across treatment arms.","code":""},{"path":"/reference/normalized_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Differences (Internal Use) — normalized_diff","text":"","code":"normalized_diff(X, D)"},{"path":"/reference/normalized_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Differences (Internal Use) — normalized_diff","text":"X Covariate matrix (intercept). D Treatment assignment vector.","code":""},{"path":"/reference/normalized_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Differences (Internal Use) — normalized_diff","text":"1xp data frame storing normalized difference covariate.","code":""},{"path":"/reference/normalized_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalized Differences (Internal Use) — normalized_diff","text":"Normalized differences computed difference means covariate across treatment arms, normalized sum within-arm variances.","code":""},{"path":"/reference/plot.aggTrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for aggTrees Objects — plot.aggTrees","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"Plots aggTrees object.","code":""},{"path":"/reference/plot.aggTrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"","code":"# S3 method for aggTrees plot(x, leaves = get_leaves(x$tree), sequence = FALSE, ...)"},{"path":"/reference/plot.aggTrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"x aggTrees object. leaves Number leaves desired tree. can used plot subtrees. sequence TRUE, whole sequence optimal groupings displayed short animation. ... arguments prp.","code":""},{"path":"/reference/plot.aggTrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"Plots aggTrees object.","code":""},{"path":"/reference/plot.aggTrees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"Nodes colored using diverging palette. Nodes predictions smaller ATE (.e., root prediction) colored blue shades, nodes predictions larger ATE colored red shades. Moreover, predictions distant absolute value ATE get darker shades. way, immediate understanding groups extreme GATEs.","code":""},{"path":"/reference/plot.aggTrees.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/plot.aggTrees.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"Riccardo Di Francesco","code":""},{"path":"/reference/plot.aggTrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for aggTrees Objects — plot.aggTrees","text":"","code":"# \\donttest{ ## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Construct sequence of groupings. CATEs estimated internally, groupings <- build_aggtree(y, D, X, method = \"aipw\")  ## Plot. plot(groupings)  plot(groupings, leaves = 3)  plot(groupings, sequence = TRUE)# }"},{"path":"/reference/print.aggTrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for aggTrees Objects — print.aggTrees","title":"Print Method for aggTrees Objects — print.aggTrees","text":"Prints aggTrees object.","code":""},{"path":"/reference/print.aggTrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for aggTrees Objects — print.aggTrees","text":"","code":"# S3 method for aggTrees print(x, ...)"},{"path":"/reference/print.aggTrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for aggTrees Objects — print.aggTrees","text":"x aggTrees object. ... arguments passed methods.","code":""},{"path":"/reference/print.aggTrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for aggTrees Objects — print.aggTrees","text":"Prints aggTrees object.","code":""},{"path":"/reference/print.aggTrees.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print Method for aggTrees Objects — print.aggTrees","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/print.aggTrees.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for aggTrees Objects — print.aggTrees","text":"Riccardo Di Francesco","code":""},{"path":"/reference/print.aggTrees.inference.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"Prints aggTrees.inference object.","code":""},{"path":"/reference/print.aggTrees.inference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"","code":"# S3 method for aggTrees.inference print(x, table = \"avg_char\", ...)"},{"path":"/reference/print.aggTrees.inference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"x aggTrees.inference object. table Either \"avg_char\" \"diff\", controls table must produced. ... arguments passed methods.","code":""},{"path":"/reference/print.aggTrees.inference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"Prints LATEX code.","code":""},{"path":"/reference/print.aggTrees.inference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"description table provided caption. covariates may feature zero variation leaf. generally happens dummy variables used split nodes. case, table == \"avg_char\" warning message produced displaying names covariates zero variation one leaves. user correct table removing associated standard errors. Compilation LATEX code requires following packages: booktabs, float, adjustbox, multirow.","code":""},{"path":"/reference/print.aggTrees.inference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/print.aggTrees.inference.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"Riccardo Di Francesco","code":""},{"path":"/reference/print.aggTrees.inference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for aggTrees.inference Objects — print.aggTrees.inference","text":"","code":"# \\donttest{ ## Generate data. set.seed(1986)  n <- 1000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k)) D <- rbinom(n, size = 1, prob = 0.5) mu0 <- 0.5 * X[, 1] mu1 <- 0.5 * X[, 1] + X[, 2] y <- mu0 + D * (mu1 - mu0) + rnorm(n)  ## Construct sequence of groupings. CATEs estimated internally, groupings <- build_aggtree(y, D, X, method = \"aipw\")  ## Analyze results with 4 groups. results <- inference_aggtree(groupings, n_groups = 4)  ## Print results. print(results, table = \"diff\") #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.2} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 0.85\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c} #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex]  #>  #>       & \\textit{Leaf 1} & \\textit{Leaf 2} & \\textit{Leaf 3} & \\textit{Leaf 4} \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\multirow{2}{*}{GATEs} & -1.455 & -0.249 & 0.034 & 1.445 \\\\ #>       & [-1.782, -1.128] & [-1.013, 0.515] & [-0.272, 0.34] & [1.084, 1.806] \\\\  #>  #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\textit{Leaf 1} & NA & NA & NA & NA \\\\ #>             & (NA) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 2} & 1.206 & NA & NA & NA \\\\ #>             & (0.009) & (NA) & (NA) & (NA) \\\\  #>       \\textit{Leaf 3} & 1.489 & 0.283 & NA & NA \\\\ #>             & (0) & (0.501) & (NA) & (NA) \\\\  #>       \\textit{Leaf 4} & 2.9 & 1.694 & 1.411 & NA \\\\ #>             & (0) & (0) & (0) & (NA) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Point estimates and $95\\%$ confidence intervals for the GATEs. Leaves are sorted in increasing order of the GATEs. Additionally, differences in the GATEs across all pairs of leaves are displayed. p-values to test the null hypothesis that a single difference is zero are adjusted using Holm's procedure and reported in parenthesis under each point estimate.} #>     \\label{table:differences.gates} #>     \\end{table} #> \\endgroup  #>  print(results, table = \"avg_char\")# } #> \\begingroup #>   \\setlength{\\tabcolsep}{8pt} #>   \\renewcommand{\\arraystretch}{1.1} #>   \\begin{table}[b!] #>     \\centering #>     \\begin{adjustbox}{width = 1\\textwidth} #>     \\begin{tabular}{@{\\extracolsep{5pt}}l c c c c c c c c } #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>       & \\multicolumn{2}{c}{\\textit{Leaf 1}} & \\multicolumn{2}{c}{\\textit{Leaf 2}} & \\multicolumn{2}{c}{\\textit{Leaf 3}} & \\multicolumn{2}{c}{\\textit{Leaf 4}} \\\\\\cmidrule{2-3} \\cmidrule{4-5} \\cmidrule{6-7} \\cmidrule{8-9}  #>       & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) & Mean & (S.D.) \\\\ #>       \\addlinespace[2pt] #>       \\hline \\\\[-1.8ex]  #>  #>       \\texttt{x1} & -0.018 & (0.073) & -0.041 & (0.188) & -0.003 & (0.079) & -0.023 & (0.082) \\\\  #>       \\texttt{x2} & -1.056 & (0.044) & -0.299 & (0.012) & 0.2 & (0.018) & 1.272 & (0.045) \\\\  #>       \\texttt{x3} & 0.043 & (0.075) & -0.136 & (0.198) & -0.143 & (0.077) & 0.029 & (0.088) \\\\  #>  #>       \\addlinespace[3pt] #>       \\\\[-1.8ex]\\hline #>       \\hline \\\\[-1.8ex] #>     \\end{tabular} #>     \\end{adjustbox} #>     \\caption{Average characteristics of units in each leaf, obtained by regressing each covariate on a set of dummies denoting leaf membership. Standard errors are estimated via the Eicker-Huber-White estimator. Leaves are sorted in increasing order of the GATEs.} #>     \\label{table:average.characteristics.leaves} #>     \\end{table} #> \\endgroup  #>"},{"path":"/reference/rename_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Renaming Variables for LATEX Usage (Internal Use) — rename_latex","title":"Renaming Variables for LATEX Usage (Internal Use) — rename_latex","text":"Renames variables character \"_\" used, causes clashes LATEX. Useful phased print method.","code":""},{"path":"/reference/rename_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Renaming Variables for LATEX Usage (Internal Use) — rename_latex","text":"","code":"rename_latex(names)"},{"path":"/reference/rename_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Renaming Variables for LATEX Usage (Internal Use) — rename_latex","text":"names string vector.","code":""},{"path":"/reference/rename_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Renaming Variables for LATEX Usage (Internal Use) — rename_latex","text":"renamed string vector. Strings \"_\" found modified rename_latex.","code":""},{"path":"/reference/sample_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Splitting — sample_split","title":"Sample Splitting — sample_split","text":"Splits sample training honest subsamples.","code":""},{"path":"/reference/sample_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Splitting — sample_split","text":"","code":"sample_split(n, training_frac = 0.5)"},{"path":"/reference/sample_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Splitting — sample_split","text":"n Size sample split. training_frac Fraction units training sample.","code":""},{"path":"/reference/sample_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Splitting — sample_split","text":"list storing indexes two different subsamples.","code":""},{"path":"/reference/sample_split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample Splitting — sample_split","text":"Riccardo Di Francesco","code":""},{"path":"/reference/subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtree — subtree","title":"Subtree — subtree","text":"Extracts subtree user-specified number leaves rpart object.","code":""},{"path":"/reference/subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtree — subtree","text":"","code":"subtree(tree, leaves = NULL, cv = FALSE)"},{"path":"/reference/subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtree — subtree","text":"tree rpart object. leaves Number leaves desired subtree. cv TRUE, leaves ignored cross-validation criterion used select partition.","code":""},{"path":"/reference/subtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtree — subtree","text":"subtree, rpart object.","code":""},{"path":[]},{"path":"/reference/subtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subtree — subtree","text":"Riccardo Di Francesco","code":""},{"path":"/reference/subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subtree — subtree","text":"","code":"## Generate data. set.seed(1986)  n <- 3000 k <- 3  X <- matrix(rnorm(n * k), ncol = k) colnames(X) <- paste0(\"x\", seq_len(k))  y <- exp(X[, 1]) + 2 * X[, 2] * X[, 2] > 0 + rnorm(n)  ## Construct tree. library(rpart) tree <- rpart(y ~ ., data = data.frame(y, X), cp = 0)  ## Extract subtree. sub_tree <- subtree(tree, leaves = 4) sub_tree_cv <- subtree(tree, cv = TRUE)"},{"path":"/reference/summary.aggTrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for aggTrees Objects — summary.aggTrees","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"Summarizes aggTrees object.","code":""},{"path":"/reference/summary.aggTrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"","code":"# S3 method for aggTrees summary(object, ...)"},{"path":"/reference/summary.aggTrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"object aggTrees object. ... arguments passed methods.","code":""},{"path":"/reference/summary.aggTrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"Prints summary aggTrees object.","code":""},{"path":"/reference/summary.aggTrees.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"R Di Francesco (2022). Aggregation Trees. CEIS Research Paper, 546. doi:10.2139/ssrn.4304256 .","code":""},{"path":[]},{"path":"/reference/summary.aggTrees.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for aggTrees Objects — summary.aggTrees","text":"Riccardo Di Francesco","code":""},{"path":"/news/index.html","id":"version-200","dir":"Changelog","previous_headings":"","what":"version 2.0.0","title":"version 2.0.0","text":"CRAN release: 2023-02-21 Updated hypothesis testing procedure. Improved LATEX output.","code":""},{"path":"/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"version 1.0.0","title":"version 1.0.0","text":"CRAN release: 2023-02-09","code":""},{"path":[]}]
